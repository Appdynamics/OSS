<?xml version="1.0" encoding="UTF-8"?>
<!-- 
/* 
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER. 
* 
* Copyright 1997-2008 Sun Microsystems, Inc. All rights reserved.
* 
* The contents of this file are subject to the terms of either the GNU 
* General Public License Version 2 only ("GPL") or the Common Development 
* and Distribution License("CDDL") (collectively, the "License").  You 
* may not use this file except in compliance with the License. You can obtain 
* a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html 
* or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific 
* language governing permissions and limitations under the License. 
* 
* When distributing the software, include this License Header Notice in each 
* file and include the License file at glassfish/bootstrap/legal/LICENSE.txt. 
* Sun designates this particular file as subject to the "Classpath" exception 
* as provided by Sun in the GPL Version 2 section of the License file that 
* accompanied this code.  If applicable, add the following below the License 
* Header, with the fields enclosed by brackets [] replaced by your own 
* identifying information: "Portions Copyrighted [year] 
* [name of copyright owner]" 
* 
* Contributor(s): 
* 
* If you wish your version of this file to be governed by only the CDDL or 
* only the GPL Version 2, indicate your decision by adding "[Contributor] 
* elects to include this software in this distribution under the [CDDL or GPL 
* Version 2] license."  If you don't indicate a single choice of license, a 
* recipient has the option to distribute your version of this file under 
* either the CDDL, the GPL Version 2 or to extend the choice of license to 
* its licensees as provided above.  However, if you add GPL Version 2 code 
* and therefore, elected the GPL Version 2 license, then the option applies 
* only if the new code is made subject to such option by the copyright 
* holder. 
*/ 
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <parent>
        <groupId>org.glassfish</groupId>
        <artifactId>glassfish-parent</artifactId>
        <version>3.0-SNAPSHOT</version>
    </parent>

    <groupId>org.glassfish.admingui</groupId>
    <artifactId>jsftemplating</artifactId>
    <name>Admin Console JSFTemplating Repackaging</name>
    <version>${jsftemplating.version}</version>
    <modelVersion>4.0.0</modelVersion>
    <description>JSFTemplating Repackaged as OSGi bundle for GlassFish</description>

    <packaging>jar</packaging>
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>work-around</id>
                        <phase>process-resources</phase>
                        <configuration>
                            <tasks>
                                <!-- For whetever reason (I have to investigate further),
                                     running mvn install subsequently adds a version attr
                                     to all import headers. Since packages don't have matching
                                     version, it fails. So, to simulate clean build, we clean
                                     the outputDir. Sahoo.
                                -->
                                <delete dir="${project.build.outputDirectory}" quiet="true"/>
                                <!-- Because, we inherit the plugin from parent and the parent
                                     configures manifest task, it fails when classes dir does not
                                     exist. So, we create one -->
                                <mkdir dir="${project.build.outputDirectory}"/>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- Configure maven-bundle-plugin which takes care of
                     OSGi packaging -->
                <!-- We need to override the plugin settings -->
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <!-- We don't use extensions as this interfers with
                     hk2-maven-plugin and that results in hk2 artifacts
                     being copied as .hk2-jar. Instead, we configure the
                     plugin to run as part of package phase. By Sahoo.
                <extensions>true</extensions>
                -->
                <configuration>
                    <!-- Enable it for jar type -s parent plugin disable it for
                         jar type.
                    -->
                    <supportedProjectTypes>
                        <supportedProjectType>jar</supportedProjectType>
                    </supportedProjectTypes>
                    <instructions>
                        <Embed-Dependency>artifactId=jsftemplating;inline=true;</Embed-Dependency>
                        <Export-Package>*; password="GlassFish"; mandatory:=password</Export-Package>
                        <Import-Package>com.sun.sql.*;resolution:=optional,*</Import-Package>
                    </instructions>
                    <unpackBundle>true</unpackBundle>
                </configuration>
                <executions>
                    <execution>
                        <id>osgi-bundle</id>
                        <phase>package</phase>
                        <goals>
                            <goal>bundle</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>com.sun.jsftemplating</groupId>
            <artifactId>jsftemplating</artifactId>
            <scope>optional</scope>
        </dependency>
    </dependencies>
</project>

