/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 2012-2015 Oracle and/or its affiliates. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
 * or packager/legal/LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at packager/legal/LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */
package org.glassfish.hk2.api;

/**
 * Every proxy generated by HK2 will implement this interface, which can be used to have finer
 * control on the behavior of the proxy
 * <p>
 * Compare this to the {@link AOPProxyCtl} interface, which is
 * implemented by proxies used for the AOPAlliance method
 * or constructor interceptor feature
 * 
 * @author jwells
 */
public interface ProxyCtl {
    /**
     * This method causes the proxy instance to get created at the current time, without
     * calling any of the methods on the underlying class itself.  This is useful if you
     * need to have the underlying object get created and go through its initialization
     * cycle at a specific time, but do not wish to invoke any specific method on
     * the object.
     * 
     * @return The underlying instance of the service (not wrapped by the proxy)
     * @throws MultiException If there was an error creating the proxy a MultiException will
     * be thrown containing the underlying cause or causes
     */
    public Object __make() throws MultiException;

}
