<beangen>
  <package>com.mchange.v2.c3p0.impl</package>
  <imports>
     <general>java.util</general>
     <specific>com.mchange.v2.c3p0.impl.AuthMaskingProperties</specific>
     <specific>com.mchange.v2.c3p0.cfg.C3P0Config</specific>
  </imports>
  <modifiers>
     <modifier>public</modifier>
     <modifier>abstract</modifier>
  </modifiers>
  <output-class>DriverManagerDataSourceBase</output-class>
  <extends>IdentityTokenResolvable</extends>
  <properties> 
    <property>
       <variable><modifiers><modifier>protected</modifier></modifiers></variable>
       <getter><modifiers><modifier>public</modifier><modifier>synchronized</modifier></modifiers></getter>
       <setter><modifiers><modifier>public</modifier><modifier>synchronized</modifier></modifiers></setter>
       <type>String</type>
       <name>driverClass</name>
       <default-value>C3P0Config.initializeStringPropertyVar("driverClass", C3P0Defaults.driverClass())</default-value>
       <bound/>
    </property>
    <property>
       <variable><modifiers><modifier>protected</modifier></modifiers></variable>
       <getter><modifiers><modifier>public</modifier><modifier>synchronized</modifier></modifiers></getter>
       <setter><modifiers><modifier>public</modifier><modifier>synchronized</modifier></modifiers></setter>
       <type>boolean</type>
       <name>forceUseNamedDriverClass</name>
       <default-value>C3P0Config.initializeBooleanPropertyVar("forceUseNamedDriverClass", C3P0Defaults.forceUseNamedDriverClass())</default-value>
    </property>
    <property>
       <variable><modifiers><modifier>protected</modifier></modifiers></variable>
       <getter><modifiers><modifier>public</modifier><modifier>synchronized</modifier></modifiers></getter>
       <setter><modifiers><modifier>public</modifier><modifier>synchronized</modifier></modifiers></setter>
       <type>String</type>
       <name>jdbcUrl</name>
       <default-value>C3P0Config.initializeStringPropertyVar("jdbcUrl", C3P0Defaults.jdbcUrl())</default-value>
    </property>
    <property>
       <variable><modifiers><modifier>protected</modifier></modifiers></variable>
       <getter><modifiers><modifier>public</modifier><modifier>synchronized</modifier></modifiers></getter>
       <setter><modifiers><modifier>public</modifier><modifier>synchronized</modifier></modifiers></setter>
       <type>Properties</type>
       <name>properties</name>
       <defensive-copy>
           (Properties) AuthMaskingProperties.fromAnyProperties( properties )
       </defensive-copy>
       <default-value>new AuthMaskingProperties()</default-value>
       <bound/>
    </property>
    <property>
       <variable><modifiers><modifier>protected</modifier></modifiers></variable>
       <getter><modifiers><modifier>public</modifier><modifier>synchronized</modifier></modifiers></getter>
       <setter><modifiers><modifier>public</modifier><modifier>synchronized</modifier></modifiers></setter>
       <type>String</type>
       <name>description</name>
    </property>
    <property>

       <!--
          identityToken is now volatile, rather than being protected by synchronization, in order to
	  avoid rare deadlocks [ see https://sourceforge.net/tracker/?func=detail&atid=383690&aid=3552097&group_id=25357 ]

	  since identityToken is a bound property, unsynchronized access introduces a potential race condition
	  in which a simultaneous resettings of the variable could lead to missing or superfluous firings of
	  propertyChangeEvents, as those event firings are controlled by a test of new and old values that
	  might become stale under concurrent modification. In actual practice, identityToken is intended to be
	  set only once and by a single thread; tolerating this race seems like an acceptible risk. if out
	  of some surplus of fastidiousness the risk of this hypothetical race becomes too great to bear,
	  we can introduce fine-grained locking for identityToken. but it hardly seems worth the trouble.
	  swaldman, 2012-09-29
       -->

       <variable><modifiers><modifier>private</modifier><modifier>volatile</modifier></modifiers></variable>
       <type>String</type>
       <name>identityToken</name>
       <bound/> <!-- the C3P0PooledConnectionPoolManager will need to be reset when this changes -->
       <getter><modifiers><modifier>public</modifier></modifiers></getter>
       <setter><modifiers><modifier>public</modifier></modifiers></setter>
    </property>
    <property>
       <variable><modifiers><modifier>protected</modifier></modifiers></variable>
       <getter><modifiers><modifier>public</modifier><modifier>synchronized</modifier></modifiers></getter>
       <setter><modifiers><modifier>public</modifier><modifier>synchronized</modifier></modifiers></setter>
       <type>String</type>
       <name>factoryClassLocation</name>
       <default-value>C3P0Config.initializeStringPropertyVar("factoryClassLocation", C3P0Defaults.factoryClassLocation())</default-value>
    </property>
  </properties>
</beangen>




