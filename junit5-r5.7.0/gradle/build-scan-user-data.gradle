// Source: https://github.com/gradle/gradle-build-scan-snippets/blob/master/guided-trials-default-custom-user-data/default-custom-user-data.gradle

tagOs()
tagIde()
tagCiOrLocal()
addCiMetadata()
addGitMetadata()
addTestParallelization()

// Add here other scripts, if needed
//apply from:"${rootProject.projectDir}/<<other-script.gradle>>"

void tagOs() {
	buildScan.tag System.getProperty('os.name')
}

void tagIde() {
	if (project.hasProperty('android.injected.invoked.from.ide')) {
		buildScan.tag 'Android Studio'
	} else if (System.getProperty('idea.version')) {
		buildScan.tag 'IntelliJ IDEA'
	} else if (System.getProperty('eclipse.buildId')) {
		buildScan.tag 'Eclipse'
	} else if (!isCi()) {
		buildScan.tag 'Cmd Line'
	}
}

void tagCiOrLocal() {
	buildScan.tag(isCi() ? 'CI' : 'LOCAL')
}

void addCiMetadata() {
	if (isJenkins()) {
		if (System.getenv('BUILD_URL')) {
			buildScan.link 'Jenkins build', System.getenv('BUILD_URL')
		}
		if (System.getenv('BUILD_NUMBER')) {
			buildScan.value 'CI build number', System.getenv('BUILD_NUMBER')
		}
		if (System.getenv('NODE_NAME')) {
			def agentName = System.getenv('NODE_NAME') == 'master' ? 'master-node' : System.getenv('NODE_NAME')
			buildScan.tag agentName
			buildScan.value 'CI node name', agentName
		}
		if (System.getenv('JOB_NAME')) {
			def jobNameLabel = 'CI job'
			def jobName = System.getenv('JOB_NAME')
			buildScan.value jobNameLabel, jobName
			addCustomValueSearchLink 'CI job build scans', [(jobNameLabel): jobName]
		}
		if (System.getenv('STAGE_NAME')) {
			def stageNameLabel = 'CI stage'
			def stageName = System.getenv('STAGE_NAME')
			buildScan.value stageNameLabel, stageName
			addCustomValueSearchLink 'CI stage build scans', [(stageNameLabel): stageName]
		}
	}

	if (isTeamCity()) {
		def teamCityConfigurationFileProp = 'teamcity.configuration.properties.file'
		if (project.hasProperty(teamCityConfigurationFileProp)) {
			def properties = new Properties()
			properties.load(new FileInputStream("${project.property(teamCityConfigurationFileProp)}"))
			def teamCityServerUrl = properties.getProperty("teamcity.serverUrl")
			if (teamCityServerUrl && project.hasProperty('build.number') && project.hasProperty('teamcity.buildType.id')) {
				def teamCityBuildNumber = project.property('build.number')
				def teamCityBuildTypeId = project.property('teamcity.buildType.id')
				buildScan.link 'TeamCity build', "${appendIfMissing(teamCityServerUrl, '/')}viewLog.html?buildNumber=${teamCityBuildNumber}&buildTypeId=${teamCityBuildTypeId}"
			}
		}
		if (project.hasProperty('build.number')) {
			buildScan.value 'CI build number', project.property('build.number')
		}
		if (project.hasProperty('agent.name')) {
			def agentName = project.property('agent.name')
			buildScan.tag agentName
			buildScan.value 'CI agent name', agentName
		}
	}

	if (isCircleCI()) {
		if (System.getenv('CIRCLE_BUILD_URL')) {
			buildScan.link 'CircleCI build', System.getenv('CIRCLE_BUILD_URL')
		}
		if (System.getenv('CIRCLE_BUILD_NUM')) {
			buildScan.value 'CI build number', System.getenv('CIRCLE_BUILD_NUM')
		}
		if (System.getenv('CIRCLE_JOB')) {
			def jobLabel = 'CI job'
			def job = System.getenv('CIRCLE_JOB')
			buildScan.value jobLabel, job
			addCustomValueSearchLink 'CI job build scans', [(jobLabel): job]
		}
		if (System.getenv('CIRCLE_WORKFLOW_ID')) {
			def workflowIdLabel = 'CI workflow'
			def workflowId = System.getenv('CIRCLE_WORKFLOW_ID')
			buildScan.value workflowIdLabel, workflowId
			addCustomValueSearchLink 'CI workflow build scans', [(workflowIdLabel): workflowId]
		}
	}

	if (isBamboo()) {
		if (System.getenv('bamboo_resultsUrl')) {
			buildScan.link 'Bamboo build', System.getenv('bamboo_resultsUrl')
		}
		if (System.getenv('bamboo_buildNumber')) {
			buildScan.value 'CI build number', System.getenv('bamboo_buildNumber')
		}
		if (System.getenv('bamboo_planName')) {
			def planNameLabel = 'CI plan'
			def planName = System.getenv('bamboo_planName')
			buildScan.value planNameLabel, planName
			addCustomValueSearchLink 'CI plan build scans', [(planNameLabel): planName]
		}
		if (System.getenv('bamboo_buildPlanName')) {
			def jobNameLabel = 'CI job'
			def jobName = System.getenv('bamboo_buildPlanName')
			buildScan.value jobNameLabel, jobName
			addCustomValueSearchLink 'CI job build scans', [(jobNameLabel): jobName]
		}
		if (System.getenv('bamboo_agentId')) {
			def agentId = System.getenv('bamboo_agentId')
			buildScan.tag agentId
			buildScan.value 'CI agent ID', agentId
		}
	}

	if (isGitHubActions()) {
		def repo = System.getenv('GITHUB_REPOSITORY')
		def runId = System.getenv('GITHUB_RUN_ID')
		if (repo && runId) {
			buildScan.link 'GitHub Actions run', "https://github.com/$repo/actions/runs/$runId"
		}
		if (System.getenv('GITHUB_WORKFLOW')) {
			def ghActionWorkflowLabel = 'GitHub workflow'
			def ghActionWorkflowName = System.getenv('GITHUB_WORKFLOW')
			buildScan.value ghActionWorkflowLabel, ghActionWorkflowName
			addCustomValueSearchLink 'GitHub workflow build scans', [(ghActionWorkflowLabel): ghActionWorkflowName]
		}
	}
}

void addGitMetadata() {
	buildScan.background {
		def gitCommitId = versioning.info.commit
		def gitBranchName = versioning.info.branch
		def gitDirty = versioning.info.dirty

		if (gitCommitId) {
			def commitIdLabel = 'Git commit id'
			value commitIdLabel, gitCommitId
			addCustomValueSearchLink 'Git commit id build scans', [(commitIdLabel): gitCommitId]
			link 'Github Source', "https://github.com/junit-team/junit5/tree/" + gitCommitId
		}
		if (gitBranchName) {
			tag gitBranchName
			value 'Git branch', gitBranchName
		}
		if (gitDirty) {
			tag 'Dirty'
		}
	}
}

void addTestParallelization() {
	allprojects { p ->
		p.tasks.withType(Test).configureEach { t -> doFirst { buildScan.value "${t.identityPath}#maxParallelForks", t.maxParallelForks.toString() } }
	}
}

static boolean isCi() {
	isJenkins() || isTeamCity() || isCircleCI() || isBamboo() || isGitHubActions()
}

static boolean isJenkins() {
	System.getenv('JENKINS_URL')
}

static boolean isTeamCity() {
	System.getenv('TEAMCITY_VERSION')
}

static boolean isCircleCI() {
	System.getenv('CIRCLECI')
}

static boolean isBamboo() {
	System.getenv('bamboo_resultsUrl')
}

static boolean isGitHubActions() {
	System.getenv('GITHUB_ACTIONS')
}

void addCustomValueSearchLink(String title, Map<String, String> search) {
	if (buildScan.server) {
		buildScan.link title, customValueSearchUrl(search)
	}
}

String customValueSearchUrl(Map<String, String> search) {
	def query = search.collect { name, value ->
		"search.names=${encodeURL(name)}&search.values=${encodeURL(value)}"
	}.join('&')
	"${appendIfMissing(buildScan.server, '/')}scans?$query#selection.buildScanB=%7BSCAN_ID%7D"
}

static String encodeURL(String url) {
	URLEncoder.encode(url, 'UTF-8')
}

static String appendIfMissing(String str, String suffix) {
	str.endsWith(suffix) ? str : str + suffix
}
