<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   applicationComplete="init()" xmlns:local="*">

	<fx:Script>
		<![CDATA[
		
		import mx.events.IndexChangedEvent;
		import mx.messaging.messages.AsyncMessage;
		import mx.utils.UIDUtil;
		import mx.messaging.events.MessageEvent;
		import mx.events.PropertyChangeEvent;
		
		private var userId:String; // Unique user id
		
		private function init():void
		{
			userId = UIDUtil.createUID();	// Generate unique user id
			customer.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, propertyChangeHandler);
			consumer.subscribe();
		}
		
		private function propertyChangeHandler(event:PropertyChangeEvent):void
		{
			sendMessage("propertyChange", {property: event.property, value: event.newValue});
		}
		
		private function accordionChangeHandler(event:IndexChangedEvent):void
		{
			sendMessage("accordionChange", {selectedIndex: event.newIndex});
		}
		
		private function messageHandler(event:MessageEvent):void
		{
			var remoteUserId:String = event.message.body.userId;
			// If the message was sent by this user, don't handle it
			if (remoteUserId == userId)
			{
				return;
			}        	
			
			var data:Object = event.message.body.data
			switch (event.message.body.action)
			{
				case "accordionChange":
					accordion.selectedIndex = data.selectedIndex;
					return;
				case "propertyChange":
					customer.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, propertyChangeHandler); // avoid circularity
					customer[data.property] = data.value; 
					customer.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, propertyChangeHandler);
					return;
			}
		}
		
		private function sendMessage(action:String, data:Object = null):void
		{
			var message:AsyncMessage = new AsyncMessage();
			message.body.userId = userId;
			message.body.action = action;
			message.body.data = data;
			producer.send(message);
		}		
		
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<local:Customer id="customer"/>
		
		<mx:ChannelSet id="cs">
			<mx:StreamingAMFChannel uri="/samples-spring/messagebroker/streamingamf"/>
			<mx:AMFChannel uri="/samples-spring/messagebroker/amflongpolling"/>
			<mx:AMFChannel uri="/samples-spring/messagebroker/amfpolling"/>
		</mx:ChannelSet>
		
		<mx:Producer id="producer" destination="chat" channelSet="{cs}"/>
		<mx:Consumer id="consumer" destination="chat" channelSet="{cs}" message="messageHandler(event)"/>
	</fx:Declarations>
	
	
	<s:Panel title="Customer Information" top="12" bottom="12" left="12" right="12">
		
		<mx:Accordion id="accordion" width="100%" height="100%" openDuration="0"
					  change="accordionChangeHandler(event)">
			
			<mx:Form label="General">
				<mx:FormItem label="First Name">
					<s:TextInput id="firstName" text="@{customer.firstName}"/>
				</mx:FormItem>
				<mx:FormItem label="Last Name">
					<s:TextInput id="lastName" text="@{customer.lastName}"/>
				</mx:FormItem>
				<mx:FormItem>
					<s:CheckBox id="usCitizen" selected="@{customer.usCitizen}" label="US Citizen"/>
				</mx:FormItem>
			</mx:Form>
			
			<mx:Form label="Address">
				<mx:FormItem label="Address">
					<s:TextInput id="address" text="@{customer.address}"/>
				</mx:FormItem>
				<mx:FormItem label="City">
					<s:TextInput id="city" text="@{customer.city}"/>
				</mx:FormItem>
				<mx:FormItem label="State">
					<s:TextInput id="state" text="@{customer.state}"/>
				</mx:FormItem>
				<mx:FormItem label="Zip">
					<s:TextInput id="zip" text="@{customer.zip}"/>
				</mx:FormItem>
			</mx:Form>
			
			<mx:Form label="Phone">
				<mx:FormItem label="Office">
					<s:TextInput id="officePhone" text="@{customer.officePhone}"/>
				</mx:FormItem>
				<mx:FormItem label="Cell">
					<s:TextInput id="cellPhone" text="@{customer.cellPhone}"/>
				</mx:FormItem>
			</mx:Form>
			
		</mx:Accordion>
		
	</s:Panel>
	
</s:Application>
