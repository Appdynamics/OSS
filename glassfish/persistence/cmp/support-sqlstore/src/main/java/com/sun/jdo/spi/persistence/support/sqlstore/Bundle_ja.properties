#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
# or packager/legal/LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at packager/legal/LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

# resource bundle for runtime messages
# key consists of: <subpackage>.<class>.<method>.<description>
# <subpackage> - is optional, package under runtime
# <class> - class name
# <method> - method name
# <description> - short description (use _ to represent space)
# all keys should be in lowercase
# connection.connectionmanager.isdown=The Connection Manager is being shut down.
connection.connectionmanager.isdown=Connection Manager \u306f\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u4e2d\u3067\u3059\u3002
# connection.connectionmanager.maxpool=Connection pool is at maximum.
connection.connectionmanager.maxpool=\u63a5\u7d9a\u30d7\u30fc\u30eb\u304c\u6700\u5927\u6570\u306b\u9054\u3057\u3066\u3044\u307e\u3059\u3002
# connection.connectionmanager.badvalue=Invalid value for ''{0}''.
connection.connectionmanager.badvalue=''{0}'' \u306e\u5024\u304c\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3002
# connection.connectionmanager.getconnection.mismatch=Pooled Connection does not have the same user context.
connection.connectionmanager.getconnection.mismatch=\u30d7\u30fc\u30eb\u3055\u308c\u305f\u63a5\u7d9a\u306b\u540c\u3058\u30e6\u30fc\u30b6\u30fc\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304c\u3042\u308a\u307e\u305b\u3093\u3002
# connection.connectionmanager.nulldriver=NULL value for Driver Name.
connection.connectionmanager.nulldriver=\u30c9\u30e9\u30a4\u30d0\u540d\u306e NULL \u5024\u3002
# connection.connectionmanager.nullurl=NULL value for URL.
connection.connectionmanager.nullurl=URL \u306e NULL \u5024\u3002
# connection.connectionmanager.zero=''{0}'' must be greater than or equal to zero.
connection.connectionmanager.zero=''{0}'' \u306f\u30bc\u30ed\u4ee5\u4e0a\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002
# connection.connectionmanager.badnew=New ''{0}'' must be greater than or equal to current ''{1}''.
connection.connectionmanager.badnew=\u65b0\u3057\u3044 ''{0}'' \u306f\u73fe\u5728\u306e ''{1}'' \u4ee5\u4e0a\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002
# connection.connectionmanager.mswaitvalue=MsWait must be greater than or equal to zero.
connection.connectionmanager.mswaitvalue=MsWait \u306f\u30bc\u30ed\u4ee5\u4e0a\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002
# connection.connectionmanager.msintervalvalue=MsInterval must be greater than zero and less than or equal to MsWait.
connection.connectionmanager.msintervalvalue=MsInterval \u306f\u3001\u30bc\u30ed\u3088\u308a\u5927\u304d\u304f\u3001\u304b\u3064 MsWait \u4ee5\u4e0b\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002
# connection.connectionmanager.poolsize='maxPool' must be greater than or equal to 'minPool'.
connection.connectionmanager.poolsize='maxPool' \u306f 'minPool' \u4ee5\u4e0a\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002
# connection.connectionmanager.conntimeout=Connection timeout expired.
connection.connectionmanager.conntimeout=\u63a5\u7d9a\u304c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306b\u306a\u308a\u307e\u3057\u305f\u3002
# connection.connectionmanager.threaditerupted=Thread interrupted.
connection.connectionmanager.threaditerupted=\u30b9\u30ec\u30c3\u30c9\u304c\u5272\u308a\u8fbc\u307e\u308c\u307e\u3057\u305f\u3002
# database.dbvendortype.resourcenotfound=Failed to find resource: {0}
database.dbvendortype.resourcenotfound=\u30ea\u30bd\u30fc\u30b9\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f: {0}
# jdo.persistencemanagerwrapper.invalidpm=PersistenceManagerWrapper is closed.
jdo.persistencemanagerwrapper.invalidpm=PersistenceManagerWrapper \u3092\u7d42\u4e86\u3057\u307e\u3059\u3002
# jdo.persistencemanagerimpl.close.activetransaction=There is an open transaction associated with this persistence manager.
jdo.persistencemanagerimpl.close.activetransaction=\u3053\u306e\u6301\u7d9a\u6027\u30de\u30cd\u30fc\u30b8\u30e3\u3068\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f\u30aa\u30fc\u30d7\u30f3\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002
# jdo.persistencemanagerimpl.assertactivetransaction.error=Transaction associated with this persistence manager is not active.
jdo.persistencemanagerimpl.assertactivetransaction.error=\u3053\u306e\u6301\u7d9a\u6027\u30de\u30cd\u30fc\u30b8\u30e3\u3068\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u304c\u6709\u52b9\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002
# jdo.persistencemanagerimpl.assertclosed.closed=PersistenceManager is closed.
jdo.persistencemanagerimpl.assertclosed.closed=PersistenceManager \u3092\u7d42\u4e86\u3057\u307e\u3059\u3002
# jdo.persistencemanagerfactoryimpl.getpersistencemanager.notconfigured=PersistenceManagerFactory is not configured.
jdo.persistencemanagerfactoryimpl.getpersistencemanager.notconfigured=PersistenceManagerFactory \u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002
# jdo.persistencemanagerimpl.internalmakepersistent.dups=An instance with the same primary key already exists in this PersistenceManager cache.
jdo.persistencemanagerimpl.internalmakepersistent.dups=\u540c\u3058\u4e3b\u30ad\u30fc\u3092\u6301\u3064\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u3053\u306e PersistenceManager \u30ad\u30e3\u30c3\u30b7\u30e5\u5185\u306b\u3059\u3067\u306b\u5b58\u5728\u3057\u3066\u3044\u307e\u3059\u3002
# jdo.persistencemanagerimpl.internaldeletepersistent.transient=Cannot delete non-persistent object.
jdo.persistencemanagerimpl.internaldeletepersistent.transient=non-persistent \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u524a\u9664\u3067\u304d\u307e\u305b\u3093\u3002
# jdo.persistencemanagerimpl.fetchinstance.many=More than one instance corresponds to this ObjectId.
jdo.persistencemanagerimpl.fetchinstance.many=\u3053\u306e ObjectId \u306b\u76f8\u5f53\u3059\u308b\u8907\u6570\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u3042\u308a\u307e\u3059\u3002
# jdo.persistencemanagerimpl.fetchinstance.none=Object not found for this ObjectId.
jdo.persistencemanagerimpl.fetchinstance.none=\u3053\u306e ObjectId \u306b\u5bfe\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002
# jdo.persistencemanagerimpl.getobjectbyid.nometadata=Metadata for the owning Class is not available.
jdo.persistencemanagerimpl.getobjectbyid.nometadata=\u6240\u6709\u3059\u308b\u30af\u30e9\u30b9\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u306f\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002
# jdo.persistencemanagerimpl.loadclassforoid.wrongoidclass=Error retrieving object Class from OID.
jdo.persistencemanagerimpl.loadclassforoid.wrongoidclass=OID \u304b\u3089\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30af\u30e9\u30b9\u306e\u53d6\u5f97\u30a8\u30e9\u30fc\u3002
# jdo.persistencemanagerimpl.another_pm=Object is associated with another PersistenceManager.
jdo.persistencemanagerimpl.another_pm=\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5225\u306e PersistenceManager \u3068\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u3044\u307e\u3059\u3002
# jdo.persistencemanagerimpl.assertpersistencecapable.error=Class {0} has not been enhanced for Transparent Persistence. Use the IDE''s JAR or WAR packager to package your persistence-capable classes before running. Or, set the Executor property on the main class to Persistence Executor to run from the IDE.
jdo.persistencemanagerimpl.assertpersistencecapable.error=\u30af\u30e9\u30b9 {0} \u304c\u900f\u904e\u7684\u6301\u7d9a\u6027\u7528\u306b\u62e1\u5f35\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u5b9f\u884c\u3059\u308b\u524d\u306b\u3001IDE \u306e JAR \u307e\u305f\u306f WAR \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3063\u3066 persistence-capable \u30af\u30e9\u30b9\u3092\u30d1\u30c3\u30b1\u30fc\u30b8\u5316\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3042\u308b\u3044\u306f\u3001\u30e1\u30a4\u30f3\u30af\u30e9\u30b9\u4e0a\u306e Executor \u30d7\u30ed\u30d1\u30c6\u30a3\u3092 Persistence Executor \u306b\u8a2d\u5b9a\u3057\u3066\u3001IDE \u304b\u3089\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002
# jdo.persistencemanagerimpl.not_processed=Unable to flush persistent instances due to circular dependencies.
jdo.persistencemanagerimpl.not_processed=\u4f9d\u5b58\u304c\u5faa\u74b0\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u6301\u7d9a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u30d5\u30e9\u30c3\u30b7\u30e5\u3067\u304d\u307e\u305b\u3093\u3002
# jdo.persistencemanagerimpl.acquiresharelock.interrupted=Failed to acquire share lock due to InterruptedException
jdo.persistencemanagerimpl.acquiresharelock.interrupted=InterruptedException \u306e\u305f\u3081\u3001\u5171\u6709\u30ed\u30c3\u30af\u3092\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f
# jdo.persistencemanagerimpl.acquiresharelock.failed=Failed to acquire share lock because _readWriteCount is less than zero
jdo.persistencemanagerimpl.acquiresharelock.failed=_readWriteCount \u304c\u30bc\u30ed\u3088\u308a\u5c0f\u3055\u3044\u305f\u3081\u3001\u5171\u6709\u30ed\u30c3\u30af\u3092\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f
# jdo.persistencemanagerimpl.releasesharelock.failed=Failed to release share lock because _readWriteCount is zero
jdo.persistencemanagerimpl.releasesharelock.failed=_readWriteCount \u304c\u30bc\u30ed\u306e\u305f\u3081\u3001\u5171\u6709\u30ed\u30c3\u30af\u3092\u30ea\u30ea\u30fc\u30b9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f
# jdo.persistencemanagerimpl.acquireexclusivelock.interrupted=Failed to acquire exclusive lock due to InterruptedException
jdo.persistencemanagerimpl.acquireexclusivelock.interrupted=InterruptedException \u306e\u305f\u3081\u3001\u6392\u4ed6\u30ed\u30c3\u30af\u3092\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f
# jdo.persistencemanagerimpl.releaseexclusivelock.failed=Failed to release exclusive lock because _readWriteCount is greater than zero
jdo.persistencemanagerimpl.releaseexclusivelock.failed=_readWriteCount \u304c\u30bc\u30ed\u3088\u308a\u5927\u304d\u3044\u305f\u3081\u3001\u6392\u4ed6\u30ed\u30c3\u30af\u3092\u30ea\u30ea\u30fc\u30b9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f
# jdo.persistencemanagerfactoryimpl.notsupported=Operation is not supported for the internal PersistenceManagerFactoryImpl.
jdo.persistencemanagerfactoryimpl.notsupported=\u5185\u90e8 PersistenceManagerFactoryImpl \u306b\u5bfe\u3059\u308b\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002
# jdo.persistencemanagerfactoryimpl.getpersistencemanager.error=Cannot use multiple combinations of username/password in the same transaction.
jdo.persistencemanagerfactoryimpl.getpersistencemanager.error=\u540c\u3058\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3067\u30e6\u30fc\u30b6\u30fc\u540d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u8907\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002
# jdo.sqlpersistencemanagerfactory.getdbname.error=Cannot get database metadata: database product name.
jdo.sqlpersistencemanagerfactory.getdbname.error=\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u88fd\u54c1\u540d\u3002
# jdo.extentcollection.constructor.invalidclass=Invalid class ''{0}'' for extent collection.
jdo.extentcollection.constructor.invalidclass=\u30a8\u30af\u30b9\u30c6\u30f3\u30c8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u30af\u30e9\u30b9 ''{0}'' \u304c\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3002
# jdo.extentcollection.constructor.nonpc=The class ''{0}'' is not persistence-capable.
jdo.extentcollection.constructor.nonpc=\u30af\u30e9\u30b9 ''{0}'' \u306f persistence-capable \u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002
# jdo.extentcollection.constructor.subclasses=Option subclasses true is not supported for extent collections.
jdo.extentcollection.constructor.subclasses=\u30aa\u30d7\u30b7\u30e7\u30f3 subclasses true \u306f\u30a8\u30af\u30b9\u30c6\u30f3\u30c8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002
# jdo.extentcollection.illegalmodification=Illegal modification of extent collection for class ''{0}''.
jdo.extentcollection.illegalmodification=\u30af\u30e9\u30b9 ''{0}'' \u306e\u30a8\u30af\u30b9\u30c6\u30f3\u30c8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u5909\u66f4\u304c\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3002
# jdo.extentcollection.methodnotsupported=Extent collection method {0} not supported.
jdo.extentcollection.methodnotsupported=\u30a8\u30af\u30b9\u30c6\u30f3\u30c8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u30e1\u30bd\u30c3\u30c9 {0} \u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002
# jdo.persistencemanagerimpl.newscoinstance.wrongclass=Cannot create SCO instance of class {0} because it is not a valid type.
jdo.persistencemanagerimpl.newscoinstance.wrongclass=\u6709\u52b9\u306a\u578b\u3067\u306f\u306a\u3044\u305f\u3081\u3001\u30af\u30e9\u30b9 {0} \u306e SCO \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3067\u304d\u307e\u305b\u3093\u3002
# jdo.lifecycle.deleted.accessField=Cannot access field of a deleted instance.
jdo.lifecycle.deleted.accessField=\u524a\u9664\u3055\u308c\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u305b\u3093\u3002
# jdo.lifecycle.xactnotactive=Active transaction required to perform this operation.
jdo.lifecycle.xactnotactive=\u3053\u306e\u51e6\u7406\u306e\u5b9f\u884c\u306b\u5fc5\u8981\u306a\u6709\u52b9\u306a\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3002
# core.generic.unknownexception=Got an unknown exception.
core.generic.unknownexception=\u672a\u77e5\u306e\u4f8b\u5916\u3092\u53d6\u5f97\u3057\u307e\u3057\u305f\u3002
# core.generic.nullparam=The {0} parameter is null.
core.generic.nullparam={0} \u30d1\u30e9\u30e1\u30fc\u30bf\u304c NULL \u3067\u3059\u3002
# core.generic.illegalparam=The {0} parameter has an illegal value of {1}.
core.generic.illegalparam={0} \u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u4e0d\u6b63\u306a\u5024 {1} \u304c\u3042\u308a\u307e\u3059\u3002
# core.generic.notinstanceof=The object of class {0} is not an instance of {1}.
core.generic.notinstanceof=\u30af\u30e9\u30b9 {0} \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c {1} \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002
# core.configuration.iddescnofield=The SqlIDDesc object was not set up properly.  There are no field descriptors available.
core.configuration.iddescnofield=SqlIDDesc \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6b63\u3057\u304f\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u5229\u7528\u53ef\u80fd\u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u8a18\u8ff0\u5b50\u304c\u3042\u308a\u307e\u305b\u3093\u3002
# core.configuration.cantloadclass=Failed to load the class {0}.
core.configuration.cantloadclass=\u30af\u30e9\u30b9 {0} \u3092\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3067\u3057\u305f\u3002
# core.configuration.cantinstantiateclass=Failed to instantiate the class {0}.
core.configuration.cantinstantiateclass=\u30af\u30e9\u30b9 {0} \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002
# core.configuration.getvendortypefailed=Failed to get the vendor type for the data store.
core.configuration.getvendortypefailed=\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u306e\u30d9\u30f3\u30c0\u30fc\u306e\u7a2e\u985e\u3092\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002
# core.configuration.columnnotable=The column descriptor did not have a valid table descriptor.
core.configuration.columnnotable=\u30ab\u30e9\u30e0 \u8a18\u8ff0\u5b50\u306b\u6709\u52b9\u306a\u8868\u8a18\u8ff0\u5b50\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002
# core.configuration.classnotmapped=The class {0} is not mapped to the table {1}.
core.configuration.classnotmapped=\u30af\u30e9\u30b9 {0} \u304c\u8868 {1} \u306b\u30de\u30c3\u30d7\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002
# core.configuration.fieldnotable=The field {0} is not associated with any table.
core.configuration.fieldnotable=\u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u304c\u3069\u306e\u8868\u3068\u3082\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u3044\u307e\u305b\u3093\u3002
# core.configuration.loadfailed=Failed to load the configuration for class {0}.
core.configuration.loadfailed=\u30af\u30e9\u30b9 {0} \u306e\u8a2d\u5b9a\u3092\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3067\u3057\u305f\u3002
# core.configuration.validationfailed=The mapping for class {0} is invalid.  Compile the class in the IDE, correct any errors, and verify that all required files are packaged for execution.
core.configuration.validationfailed=\u30af\u30e9\u30b9 {0} \u306e\u30de\u30c3\u30d4\u30f3\u30b0\u304c\u7121\u52b9\u3067\u3059\u3002IDE \u5185\u306e\u30af\u30e9\u30b9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3001\u30a8\u30e9\u30fc\u3092\u4fee\u5fa9\u3057\u3066\u304b\u3089\u3001\u3059\u3079\u3066\u306e\u5fc5\u9808\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5b9f\u884c\u7528\u306b\u30d1\u30c3\u30b1\u30fc\u30b8\u5316\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002
# {0} - class name
# {1} - error message
# core.configuration.validationproblem=Validation error in class {0}: {1}
core.configuration.validationproblem=\u30af\u30e9\u30b9 {0} \u306e\u691c\u8a3c\u30a8\u30e9\u30fc: {1}
# core.configuration.fieldnotmapped=The persistent field {0} for the class {1} is not mapped.
core.configuration.fieldnotmapped=\u30af\u30e9\u30b9 {1} \u306e\u6301\u7d9a\u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u304c\u30de\u30c3\u30d7\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002
# core.configuration.noneexistentpkfield=The field {0} in the ObjectId class {1} does not exist in the PersistenceCapable class {2}.
core.configuration.noneexistentpkfield=ObjectId \u30af\u30e9\u30b9 {1} \u5185\u306e\u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u304c PersistenceCapable \u30af\u30e9\u30b9 {2} \u306b\u5b58\u5728\u3057\u3066\u3044\u307e\u305b\u3093\u3002
# core.configuration.unsupportedconsistencylevel=The class {0} has an unsupported consistency level. Currently supported consistecy levels are "none", "check-modified-at-commit", "lock-when-loaded".
core.configuration.unsupportedconsistencylevel=\u30af\u30e9\u30b9 {0} \u306b\u3001\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u6574\u5408\u6027\u30ec\u30d9\u30eb\u304c\u3042\u308a\u307e\u3059\u3002\u73fe\u5728\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u6574\u5408\u6027\u30ec\u30d9\u30eb\u306f "none"\u3001"check-modified-at-commit"\u3001"lock-when-loaded" \u3067\u3059\u3002
# core.persistencestore.toomanyobjforcard1=Database not consistent with persistent model.  An attempt to retrieve the object referred to by the {1} association of the {0} class retrieved {2} items, but only 1 item can be accommodated since the cardinality upper bound for the association is 1.
core.persistencestore.toomanyobjforcard1=\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304c\u6301\u7d9a\u30e2\u30c7\u30eb\u3068\u4e00\u81f4\u3057\u3066\u3044\u307e\u305b\u3093\u3002{2} \u30a2\u30a4\u30c6\u30e0\u3092\u53d6\u5f97\u3057\u305f {0} \u30af\u30e9\u30b9\u306e {1} \u95a2\u9023\u4ed8\u3051\u306b\u3088\u3063\u3066\u53c2\u7167\u3055\u308c\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u53d6\u5f97\u3092\u8a66\u307f\u307e\u3057\u305f\u304c\u3001\u95a2\u9023\u4ed8\u3051\u306e\u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u4e0a\u9650\u304c 1 \u306e\u305f\u3081\u30011 \u30a2\u30a4\u30c6\u30e0\u3057\u304b\u683c\u7d0d\u3067\u304d\u307e\u305b\u3093\u3002
# core.persistencestore.jdbcerror=Got a JDBC SQLException. Please read the remaining error stack for more information.
core.persistencestore.jdbcerror=JDBC SQLException \u3092\u53d6\u5f97\u3057\u307e\u3057\u305f\u3002\u8a73\u7d30\u306f\u6b8b\u308a\u306e\u30a8\u30e9\u30fc\u30b9\u30bf\u30c3\u30af\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002
# core.persistencestore.toomanyrows=More rows were returned from the database when attempting to get the value for the association {1} of the class {0} than the cardinality of this association allows.  The maximum number of rows allowed is {2}.
core.persistencestore.toomanyrows=\u30af\u30e9\u30b9 {0} \u306e\u95a2\u9023\u4ed8\u3051 {1} \u306e\u5024\u3092\u53d6\u5f97\u3057\u3088\u3046\u3068\u3057\u305f\u3068\u304d\u306b\u3001\u3053\u306e\u95a2\u9023\u4ed8\u3051\u306e\u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u304c\u8a31\u53ef\u3059\u308b\u3082\u306e\u3088\u308a\u591a\u3044\u884c\u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u8fd4\u3055\u308c\u307e\u3057\u305f\u3002\u8a31\u53ef\u3055\u308c\u3066\u3044\u308b\u6700\u5927\u884c\u6570\u306f {2} \u3067\u3059\u3002
# core.persistencestore.toofewrows=Fewer rows were returned from the database when attempting to get the value for the association {1} of the class {0} than the cardinality of this association allows.  The minimum number of rows allowed is {2}.
core.persistencestore.toofewrows=\u30af\u30e9\u30b9 {0} \u306e\u95a2\u9023\u4ed8\u3051 {1} \u306e\u5024\u3092\u53d6\u5f97\u3057\u3088\u3046\u3068\u3057\u305f\u3068\u304d\u306b\u3001\u3053\u306e\u95a2\u9023\u4ed8\u3051\u306e\u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u304c\u8a31\u53ef\u3059\u308b\u3082\u306e\u3088\u308a\u5c11\u306a\u3044\u884c\u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u8fd4\u3055\u308c\u307e\u3057\u305f\u3002\u8a31\u53ef\u3055\u308c\u3066\u3044\u308b\u6700\u5c0f\u884c\u6570\u306f {2} \u3067\u3059\u3002
# core.persistencestore.toomanyrowforjoinedtable=More than one row was returned for one of the tables mapped to the class {0}.  Each table mapped to a class should have only one row for each instance of the object.  The database schema may need to modified or referential integrity constraints may need to be added.
core.persistencestore.toomanyrowforjoinedtable=\u30af\u30e9\u30b9 {0} \u306b\u30de\u30c3\u30d7\u3055\u308c\u305f\u8868\u306e 1 \u3064\u306b\u5bfe\u3057\u3066\u8907\u6570\u306e\u884c\u304c\u8fd4\u3055\u308c\u307e\u3057\u305f\u3002\u30af\u30e9\u30b9\u306b\u30de\u30c3\u30d7\u3055\u308c\u305f\u5404\u8868\u306b\u306f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3054\u3068\u306b 1 \u884c\u3057\u304b\u5165\u308c\u3089\u308c\u307e\u305b\u3093\u3002\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30b9\u30ad\u30fc\u30de\u3092\u5909\u66f4\u3059\u308b\u304b\u3001\u53c2\u7167\u6574\u5408\u6027\u306e\u5236\u7d04\u3092\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002
# core.statemanager.nopkupdate=Update of a primary key field is not allowed.
core.statemanager.nopkupdate=\u4e3b\u30ad\u30fc\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u66f4\u65b0\u306f\u3067\u304d\u307e\u305b\u3093\u3002
# core.statemanager.nopm=The state manager does not contain a reference to the persistence manager.
core.statemanager.nopm=\u72b6\u614b\u30de\u30cd\u30fc\u30b8\u30e3\u306b\u6301\u7d9a\u6027\u30de\u30cd\u30fc\u30b8\u30e3\u3078\u306e\u53c2\u7167\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u305b\u3093\u3002
# core.statemanager.poshiddenindex=The index to a hidden field should be negative but we got an index of {0}.
core.statemanager.poshiddenindex=\u975e\u8868\u793a\u30d5\u30a3\u30fc\u30eb\u30c9\u3078\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f\u8ca0\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u304c\u3001{0} \u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\u3057\u307e\u3057\u305f\u3002
# core.statemanager.cantnewoid=Failed to create a new primary key instance of class {0}.
core.statemanager.cantnewoid=\u30af\u30e9\u30b9 {0} \u306e\u65b0\u3057\u3044\u4e3b\u30ad\u30fc\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002
# core.statemanager.cantsetkeyfield=Failed to set the value for the primary key field {0}.
core.statemanager.cantsetkeyfield=\u4e3b\u30ad\u30fc\u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u306e\u5024\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002
# core.statemanager.getfieldfailed=Failed to get field.
core.statemanager.getfieldfailed=\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002
# core.statemanager.setfieldfailed=Failed to set field.
core.statemanager.setfieldfailed=\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002
# core.statemanager.notnavigable=An attempt was made to access the field {0} of the class {1}.  This field was not previously instantiated and this class does not allow dynamic navigation.  You must either request the field when retrieving the class or allow dynamic navigation so that it can be retrieved automatically when accessed.
core.statemanager.notnavigable=\u30af\u30e9\u30b9 {1} \u306e\u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u3078\u306e\u30a2\u30af\u30bb\u30b9\u304c\u8a66\u307f\u3089\u308c\u307e\u3057\u305f\u3002\u3053\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u3042\u3089\u304b\u3058\u3081\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u3066\u304a\u3089\u305a\u3001\u3053\u306e\u30af\u30e9\u30b9\u306f\u52d5\u7684\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u3092\u8a31\u53ef\u3057\u307e\u305b\u3093\u3002\u30af\u30e9\u30b9\u306e\u53d6\u5f97\u6642\u306b\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8981\u6c42\u3059\u308b\u304b\u3001\u52d5\u7684\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u3092\u8a31\u53ef\u3057\u3066\u3001\u30a2\u30af\u30bb\u30b9\u6642\u306b\u81ea\u52d5\u7684\u306b\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002
# core.statemanager.readonly=An attempt was made to modify the read-only field {0} of the class {1}.
core.statemanager.readonly=\u30af\u30e9\u30b9 {1} \u306e\u8aad\u307f\u53d6\u308a\u5c02\u7528\u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u3092\u5909\u66f4\u3057\u3088\u3046\u3068\u3057\u307e\u3057\u305f\u3002
# core.statemanager.anotherowner=Cannot assign SCO instance that is owned by another object.
core.statemanager.anotherowner=\u5225\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6240\u6709\u3059\u308b SCO \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5272\u308a\u5f53\u3066\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002
# core.statemanager.objectnotfound=Object does not exist in the data store.
core.statemanager.objectnotfound=\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u5185\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5b58\u5728\u3057\u3066\u3044\u307e\u305b\u3093\u3002
# core.statemanager.conflictingvalues=Conflicting values between field {0} and field {1} which are mapped to the same column
core.statemanager.conflictingvalues=\u540c\u3058\u30ab\u30e9\u30e0\u306b\u30de\u30c3\u30d7\u3055\u308c\u3066\u3044\u308b\u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u3068\u30d5\u30a3\u30fc\u30eb\u30c9 {1} \u306e\u9593\u3067\u5024\u304c\u77db\u76fe\u3057\u3066\u3044\u307e\u3059
# core.statemanager.releaselock.wrongthread=This thread {0} does not hold StateManager lock.
core.statemanager.releaselock.wrongthread=\u3053\u306e\u30b9\u30ec\u30c3\u30c9 {0} \u306f StateManager \u30ed\u30c3\u30af\u3092\u4fdd\u6301\u3057\u307e\u305b\u3093\u3002
# core.statemanager.wrongusageforoverlappingpkfkdelete=Incorrect attempt to remove an instance from a managed relationship. The relationship is defined by a primary key column on the other side. A remove operation on a collection requires updating the column on the other side, and primary key update is not allowed. Therefore, removal of an instance from a managed relationship collection defined by a primary key can only be done by deleting the instance, either explicitly or by cascade delete.
core.statemanager.wrongusageforoverlappingpkfkdelete=\u7ba1\u7406\u3055\u308c\u305f\u95a2\u4fc2\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u524a\u9664\u3057\u3088\u3046\u3068\u3059\u308b\u306e\u306f\u4e0d\u6b63\u306a\u8a66\u307f\u3067\u3059\u3002\u95a2\u4fc2\u306f\u4ed6\u65b9\u30b5\u30a4\u30c9\u306e\u4e3b\u30ad\u30fc\u30ab\u30e9\u30e0\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u4e0a\u306e\u524a\u9664\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u3001\u4ed6\u65b9\u30b5\u30a4\u30c9\u306e\u30ab\u30e9\u30e0\u306e\u66f4\u65b0\u304c\u5fc5\u8981\u3067\u3059\u3002\u4e3b\u30ad\u30fc\u306e\u66f4\u65b0\u306f\u3001\u8a31\u53ef\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u306e\u305f\u3081\u3001\u4e3b\u30ad\u30fc\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u305f\u7ba1\u7406\u95a2\u4fc2\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u306f\u3001\u305d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u660e\u793a\u7684\u306b\u524a\u9664\u3001\u307e\u305f\u306f\u30ab\u30b9\u30b1\u30fc\u30c9\u524a\u9664\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u306e\u307f\u884c\u3048\u307e\u3059\u3002
# core.constraint.unknownfield=The field {0} specified in the retrieve descriptor is not a member of the class {1}.
core.constraint.unknownfield=\u53d6\u5f97\u8a18\u8ff0\u5b50\u306b\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u304c\u30af\u30e9\u30b9 {1} \u306e\u30e1\u30f3\u30d0\u30fc\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002
# core.constraint.needvalnode=Error in the constraint stack.  A value is expected.
core.constraint.needvalnode=\u5236\u7d04\u30b9\u30bf\u30c3\u30af\u3067\u306e\u30a8\u30e9\u30fc\u3002\u5024\u304c\u5fc5\u8981\u3067\u3059\u3002
# core.constraint.needfieldnode=Error in the constraint stack.  An field description is expected.
core.constraint.needfieldnode=\u5236\u7d04\u30b9\u30bf\u30c3\u30af\u3067\u306e\u30a8\u30e9\u30fc\u3002\u30d5\u30a3\u30fc\u30eb\u30c9\u8a18\u8ff0\u304c\u5fc5\u8981\u3067\u3059\u3002
# core.constraint.stackempty=The constraint stack is empty -- not enough values for the number of operator.
core.constraint.stackempty=\u5236\u7d04\u30b9\u30bf\u30c3\u30af\u304c\u7a7a\u767d\u3067\u3059\u3002\u6f14\u7b97\u5b50\u306e\u6570\u3068\u3057\u3066\u5341\u5206\u306a\u5024\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002
# core.constraint.illegalop=The operation parameter contained an illegal value of {0}.
core.constraint.illegalop=operation \u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u4e0d\u6b63\u306a\u5024 {0} \u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3057\u305f\u3002
# core.constraint.illegalnode=Illegal constraint node {0} in the SqlConstraint stack.
core.constraint.illegalnode=SqlConstraint \u30b9\u30bf\u30c3\u30af\u5185\u306e\u5236\u7d04\u30ce\u30fc\u30c9 {0} \u304c\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3002
# core.constraint.illegalaction=The action parameter had an illegal value of {0}.  Legal values are ACT_NONE (0), ACT_RESTRICT (1), ACT_CASCADE (2), ACT_NULLIFY (3).
core.constraint.illegalaction=\u30a2\u30af\u30b7\u30e7\u30f3\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u4e0d\u6b63\u306a\u5024 {0} \u304c\u3042\u308a\u307e\u3057\u305f\u3002\u6b63\u3057\u3044\u5024\u306f ACT_NONE (0)\u3001ACT_RESTRICT (1)\u3001ACT_CASCADE (2)\u3001ACT_NULLIFY (3) \u3067\u3059\u3002
# core.constraint.fieldrequired=The fieldName parameter is missing, but the operation {0} requires a field.
core.constraint.fieldrequired=fieldName \u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3 {0} \u306b\u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002
# core.constraint.fielddisallowed=The fieldName parameter was specified, but it is dissallowed with the operation {0}.
core.constraint.fielddisallowed=fieldName \u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6307\u5b9a\u3055\u308c\u307e\u3057\u305f\u304c\u3001\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3 {0} \u3067\u306f\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\u3002
# core.constraint.valrequired=The value parameter is missing, but the operation {0} requires a value.
core.constraint.valrequired=value \u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3 {0} \u306b\u306f\u5024\u304c\u5fc5\u8981\u3067\u3059\u3002
# core.constraint.valdisallowed=The value parameter was specified, but it is dissallowed with the operation {0}.
core.constraint.valdisallowed=value \u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6307\u5b9a\u3055\u308c\u307e\u3057\u305f\u304c\u3001\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3 {0} \u3067\u306f\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\u3002
# core.constraint.duporderby=The constraint is an \"order by\" for the field {0} which has already been specified in an \"order by\" constraint.
core.constraint.duporderby=\u5236\u7d04\u306f\u3001\u3059\u3067\u306b \"order by\" \u5236\u7d04\u306b\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u306e \"order by\" \u3067\u3059\u3002
# core.store.operationfailed=Concurrent access exception: object to {0} has been updated or deleted by another transaction.
core.store.operationfailed=\u540c\u6642\u30a2\u30af\u30bb\u30b9\u4f8b\u5916: {0} \u3078\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u5225\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u66f4\u65b0\u307e\u305f\u306f\u524a\u9664\u3055\u308c\u3066\u3044\u307e\u3059\u3002
# core.fielddesc.minvalue=Value: {0} is less than minimum allowed: {1} for the field type {2}.
core.fielddesc.minvalue=\u5024: {0} \u306f\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u578b {2} \u306b\u6307\u5b9a\u3067\u304d\u308b\u6700\u5c0f\u5024 {1} \u3092\u4e0b\u56de\u3063\u3066\u3044\u307e\u3059\u3002
# core.fielddesc.maxvalue=Value: {0} is greater than maximum allowed: {1} for the field type {2}.
core.fielddesc.maxvalue=\u5024: {0} \u306f\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u578b {2} \u306b\u6307\u5b9a\u3067\u304d\u308b\u6700\u5927\u5024 {1} \u3092\u8d85\u3048\u3066\u3044\u307e\u3059\u3002
# Vendor Name
# vendor=Sun Microsystems
vendor=Sun Microsystems
# majorVersion (minorVersion) buildDate
# fullVersion={0} ({1}) {2}
fullVersion={0} ({1}) {2}

# sqlstore.persistencemgr.cacheproperties=PersistenceManagerImpl cache properties: _txCacheInitialCapacity={0}, _flushedCacheInitialCapacity={1}, _flushedCacheLoadFactor={2}, _weakCacheInitialCapacity={3}, _weakCacheLoadFactor={4}.
sqlstore.persistencemgr.cacheproperties=PersistenceManagerImpl cache properties: _txCacheInitialCapacity={0}, _flushedCacheInitialCapacity={1}, _flushedCacheLoadFactor={2}, _weakCacheInitialCapacity={3}, _weakCacheLoadFactor={4}.
# sqlstore.persistencemgr.replacingdeletedinstance=Replacing deleted instance with new for Object Id: {0}.
sqlstore.persistencemgr.replacingdeletedinstance=\u524a\u9664\u3055\u308c\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u65b0\u3057\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ID : {0} \u306b\u7f6e\u63db\u3057\u307e\u3059\u3002
# sqlstore.resultdesc.nodiscriminators=There are no vertical and horizontal discriminators available to distinguish the proper class type.
sqlstore.resultdesc.nodiscriminators=\u6b63\u3057\u3044\u30af\u30e9\u30b9\u578b\u306e\u8b58\u5225\u306b\u4f7f\u7528\u3067\u304d\u308b\u5782\u76f4\u304a\u3088\u3073\u6c34\u5e73\u306e\u5224\u5225\u304c\u3042\u308a\u307e\u305b\u3093\u3002
# sqlstore.resultdesc.inconsistentmatch=The vertical discriminator is a mismatch inconsistent with the horizontal discriminator which is a match.
sqlstore.resultdesc.inconsistentmatch=\u5782\u76f4\u306e\u5224\u5225\u304c\u3001\u4e00\u81f4\u3059\u308b\u6c34\u5e73\u306e\u5224\u5225\u3068\u4e0d\u4e00\u81f4\u3067\u77db\u76fe\u3057\u3066\u3044\u307e\u3059\u3002
# sqlstore.resultdesc.toomanyprojections=Cannot have more than one field in projection.
sqlstore.resultdesc.toomanyprojections=\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306b\u8907\u6570\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u542b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002
# sqlstore.selectstatement.noupdatelocksupport=One of the object types involved in this query is at consistency level "lock-when-loaded". Enforcing this consistency level requires data store to support locking for update at row level. The data store does not support locking for update at row level.
sqlstore.selectstatement.noupdatelocksupport=\u3053\u306e\u30af\u30a8\u30ea\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u578b\u306e 1 \u3064\u304c\u6574\u5408\u6027\u30ec\u30d9\u30eb\u304c "lock-when-loaded" \u3067\u3059\u3002\u3053\u306e\u6574\u5408\u6027\u30ec\u30d9\u30eb\u3092\u9069\u7528\u3059\u308b\u306b\u306f\u3001\u884c\u30ec\u30d9\u30eb\u3067\u306e\u66f4\u65b0\u306e\u30ed\u30c3\u30af\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u304c\u5fc5\u8981\u3067\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u306f\u884c\u30ec\u30d9\u30eb\u3067\u306e\u66f4\u65b0\u306e\u30ed\u30c3\u30af\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u305b\u3093\u3002

# SQLStoreManager

# sqlstore.sqlstoremanager.errorcloseresultset=Error closing SQL result set. Exception: {0}
sqlstore.sqlstoremanager.errorcloseresultset=SQL \u30ea\u30b6\u30eb\u30c8\u30bb\u30c3\u30c8\u3092\u9589\u3058\u308b\u969b\u306e\u30a8\u30e9\u30fc\u3002\u4f8b\u5916: {0}
# sqlstore.sqlstoremanager.errorclosestatement=Error closing SQL statement. Exception: {0}
sqlstore.sqlstoremanager.errorclosestatement=SQL \u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\u3092\u9589\u3058\u308b\u969b\u306e\u30a8\u30e9\u30fc\u3002\u4f8b\u5916: {0}

# EJBHelper properties

# ejb.cmphelper.missingclass=Invalid null class instance passed to EJBHelper.loadJDOQLElementsProperties
ejb.cmphelper.missingclass=EJBHelper.loadJDOQLElementsProperties \u306b\u6e21\u3055\u308c\u305f NULL \u30af\u30e9\u30b9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093
# {0} - properties file name
# {1} - concrete bean class name
# ejb.cmphelper.errorloadingproperties=Failed to load properties file {0} for class {1}
ejb.cmphelper.errorloadingproperties=\u30af\u30e9\u30b9 {1} \u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u30d5\u30a1\u30a4\u30eb {0} \u3092\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3067\u3057\u305f
# {0} - properties file name
# ejb.cmphelper.cannotfindfile=Failed to find properties file {0}
ejb.cmphelper.cannotfindfile=\u30d7\u30ed\u30d1\u30c6\u30a3\u30d5\u30a1\u30a4\u30eb {0} \u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f
# {0} - method name
# ejb.ejbhelper.nonmanaged=Method {0} should not be called in a non-managed environment.
ejb.ejbhelper.nonmanaged=\u30e1\u30bd\u30c3\u30c9 {0} \u306f\u7ba1\u7406\u3055\u308c\u3066\u3044\u306a\u3044\u74b0\u5883\u3067\u306f\u547c\u3073\u51fa\u3059\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002

#NOI18N messages
# sqlstore.cachemanager.getcachesize=--- CACHE: getCacheSize.
sqlstore.cachemanager.getcachesize=--- CACHE: getCacheSize.
# sqlstore.cachemanager.setcachesize=--- CACHE: setCacheSize.
sqlstore.cachemanager.setcachesize=--- CACHE: setCacheSize.
# sqlstore.cachemanager.getcleansize=--- CACHE: getCleanSize.
sqlstore.cachemanager.getcleansize=--- CACHE: getCleanSize.
# sqlstore.cachemanager.setcleansize=--- CACHE: setCleanSize.
sqlstore.cachemanager.setcleansize=--- CACHE: setCleanSize.
# sqlstore.cachemanager.setinstancepolicy=--- CACHE: setInstancePolicy.
sqlstore.cachemanager.setinstancepolicy=--- CACHE: setInstancePolicy.
# sqlstore.cachemanager.getinstancepolicy=--- CACHE: getInstancePolicy.
sqlstore.cachemanager.getinstancepolicy=--- CACHE: getInstancePolicy.
# sqlstore.cachemanager.checkinstance=--- CACHE: checkInstance ==> {0}.
sqlstore.cachemanager.checkinstance=--- CACHE: checkInstance ==> {0}.
# sqlstore.cachemanager.getinstance.tempobj=---> CACHE: getInstance ==> {0}.
sqlstore.cachemanager.getinstance.tempobj=---> CACHE: getInstance ==> {0}.
# sqlstore.cachemanager.getinstance.inuse=---> CACHE: getInstance : got: {0}, In Use: {1}.
sqlstore.cachemanager.getinstance.inuse=---> CACHE: getInstance : got: {0}, In Use: {1}.
# sqlstore.cachemanager.getpersistentcopy=---> CACHE: calling getPersistentCopy...
sqlstore.cachemanager.getpersistentcopy=---> CACHE: calling getPersistentCopy...
# sqlstore.cachemanager.getinstance.inuse.count=<--- CACHE: getInstance: returning: {0}, count: {1}
sqlstore.cachemanager.getinstance.inuse.count=<--- CACHE: getInstance: returning: {0}, count: {1}
# sqlstore.cachemanager.saveinstance=---> CACHE: saveInstance.
sqlstore.cachemanager.saveinstance=---> CACHE: saveInstance.
# sqlstore.cachemanager.saveinstance.new=---> CACHE: saveInstance - NEW.
sqlstore.cachemanager.saveinstance.new=---> CACHE: saveInstance - NEW.
# sqlstore.cachemanager.saveinstance.new.done=<--- CACHE: saveInstance new DONE: Cache Size: {0}, count: {1}.
sqlstore.cachemanager.saveinstance.new.done=<--- CACHE: saveInstance new DONE: Cache Size: {0}, count: {1}.
# sqlstore.cachemanager.saveinstance.deleted.left=<--- CACHE: saveInstance - Was Deleted. Left: {0}.
sqlstore.cachemanager.saveinstance.deleted.left=<--- CACHE: saveInstance - Was Deleted. Left: {0}.
# sqlstore.cachemanager.saveinstance.same=<--- CACHE: saveInstance: THE SAME:{0}.
sqlstore.cachemanager.saveinstance.same=<--- CACHE: saveInstance: THE SAME:{0}.
# sqlstore.cachemanager.saveinstance.replace.old=<--- CACHE: saveInstance : REPLACE old: {0} with new: {1}, count: {2}.
sqlstore.cachemanager.saveinstance.replace.old=<--- CACHE: saveInstance : REPLACE old: {0} with new: {1}, count: {2}.
# sqlstore.cachemanager.saveinstance.need.merge=---> CACHE: saveInstance: NEED MERGE.
sqlstore.cachemanager.saveinstance.need.merge=---> CACHE: saveInstance: NEED MERGE.
# sqlstore.cachemanager.saveinstance.save=---> CACHE: saveInstance: SAVE: {0}.
sqlstore.cachemanager.saveinstance.save=---> CACHE: saveInstance: SAVE: {0}.
# sqlstore.cachemanager.saveinstance.inv.old=---> CACHE: saveInstance: invalidate old.
sqlstore.cachemanager.saveinstance.inv.old=---> CACHE: saveInstance: invalidate old.
# sqlstore.cachemanager.saveinstance.inv.old=---> CACHE: saveInstance: invalidate new.
sqlstore.cachemanager.saveinstance.inv.old=---> CACHE: saveInstance: invalidate new.
# sqlstore.cachemanager.saveinstance.done.count=<--- CACHE: saveInstance: DONE: count: {0}.
sqlstore.cachemanager.saveinstance.done.count=<--- CACHE: saveInstance: DONE: count: {0}.
# sqlstore.cachemanager.removed.cachesize=---> CACHE: Removed. Cache Size:  {0}.
sqlstore.cachemanager.removed.cachesize=---> CACHE: Removed. Cache Size:  {0}.
# sqlstore.cachemanager.markdeleted=---> CACHE: marked DELETED. count: {0}.
sqlstore.cachemanager.markdeleted=---> CACHE: marked DELETED. count: {0}.
# sqlstore.cachemanager.invalidate=---> CACHE: invalidate.
sqlstore.cachemanager.invalidate=---> CACHE: invalidate.
# sqlstore.cachemanager.invalidate.end=<--- CACHE: invalidate.
sqlstore.cachemanager.invalidate.end=<--- CACHE: invalidate.
# sqlstore.cachemanager.cleancache=--- CACHE: cleanCache.
sqlstore.cachemanager.cleancache=--- CACHE: cleanCache.
# sqlstore.cachemanager.cachedinstancepolicy.merge=--- CachedInstancePolicy::merge.
sqlstore.cachemanager.cachedinstancepolicy.merge=--- CachedInstancePolicy::merge.
# sqlstore.cachemanager.cachedinstancepolicy.invalidate=---> CachedInstancePolicy::invalidate.
sqlstore.cachemanager.cachedinstancepolicy.invalidate=---> CachedInstancePolicy::invalidate.
# sqlstore.cachemanager.cachedinstancepolicy.invalidate.ok=<--- CachedInstancePolicy::invalidate OK.
sqlstore.cachemanager.cachedinstancepolicy.invalidate.ok=<--- CachedInstancePolicy::invalidate OK.
# sqlstore.sqlstatemanager.replaceobjectfield=-- SqlStateManager.replaceObjectField(), field = {0}, type= {1}.
sqlstore.sqlstatemanager.replaceobjectfield=-- SqlStateManager.replaceObjectField(), field = {0}, type= {1}.
# sqlstore.sqlstatemanager.replaceobjectfield.unsetsco=-- SqlStateManager.replaceObjectField(), unset SCO.
sqlstore.sqlstatemanager.replaceobjectfield.unsetsco=-- SqlStateManager.replaceObjectField(), unset SCO.
# sqlstore.sqlstatemanager.makedirty=--> SqlStateManager.makeDirty(), field = {0}.
sqlstore.sqlstatemanager.makedirty=--> SqlStateManager.makeDirty(), field = {0}.
# sqlstore.sqlstatemanager.makedirty.fixscocollection=--- SqlStateManager.makeDirty(), fix SCOCollection.
sqlstore.sqlstatemanager.makedirty.fixscocollection=--- SqlStateManager.makeDirty(), fix SCOCollection.
# sqlstore.sqlstatemanager.makedirty.fixscodate=--- SqlStateManager.makeDirty(), fix SCODate.
sqlstore.sqlstatemanager.makedirty.fixscodate=--- SqlStateManager.makeDirty(), fix SCODate.
# sqlstore.sqlstatemanager.applyupdates=--> SqlStateManager.applyUpdates(), field = {0}.
sqlstore.sqlstatemanager.applyupdates=--> SqlStateManager.applyUpdates(), field = {0}.
# sqlstore.sqlstatemanager.makepresent=--> SqlStateManager.applyUpdates(), field = {0}.
sqlstore.sqlstatemanager.makepresent=--> SqlStateManager.applyUpdates(), field = {0}.
# sqlstore.sqlstatemanager.makepersistence=<-> SqlStateManager.makePersistence(), type =  {0}.
sqlstore.sqlstatemanager.makepersistence=<-> SqlStateManager.makePersistence(), type =  {0}.
# sqlstore.sqlstatemanager.processforeign=process foreign field ={0}.
sqlstore.sqlstatemanager.processforeign=process foreign field ={0}.
# sqlstore.sqlstatemanager.makedirtyfield=marked dirty field  ={0}.
sqlstore.sqlstatemanager.makedirtyfield=marked dirty field  ={0}.
# sqlstore.sqlstatemanager.deletepersistence=<-> SqlStateManager.deletePersistence(), type ={0}.
sqlstore.sqlstatemanager.deletepersistence=<-> SqlStateManager.deletePersistence(), type ={0}.
# sqlstore.sqlstatemanager.updatepersistence.skipped=<--> SqlStateManager.updatePersistent() skipped , type ={0} , obj= {1}.
sqlstore.sqlstatemanager.updatepersistence.skipped=<--> SqlStateManager.updatePersistent() skipped , type ={0} , obj= {1}.
# sqlstore.sqlstatemanager.updatepersistent=--> SqlStateManager.updatePersistent(), type = {0}.
sqlstore.sqlstatemanager.updatepersistent=--> SqlStateManager.updatePersistent(), type = {0}.
# sqlstore.sqlstatemanager.updatepersistent.exit=<-- SqlStateManager.updatePersistent().
sqlstore.sqlstatemanager.updatepersistent.exit=<-- SqlStateManager.updatePersistent().
# sqlstore.sqlstatemanager.refreshpersistent=--> SqlStateManager.refreshPersistence(), type = {0}.
sqlstore.sqlstatemanager.refreshpersistent=--> SqlStateManager.refreshPersistence(), type = {0}.
# sqlstore.sqlstatemanager.refreshpersistent.exit=<-- SqlStateManager.refreshPersistent().
sqlstore.sqlstatemanager.refreshpersistent.exit=<-- SqlStateManager.refreshPersistent().
# sqlstore.sqlstatemanager.reload=--> SqlStateManager.reload(), type = {0}.
sqlstore.sqlstatemanager.reload=--> SqlStateManager.reload(), type = {0}.
# sqlstore.sqlstatemanager.reload.exit=<-- SqlStateManager.reload().
sqlstore.sqlstatemanager.reload.exit=<-- SqlStateManager.reload().
# sqlstore.sqlstatemanager.preparetoupdateph1=--> SqlStateManager.prepareToUpdatePhaseI(), type = {0}.
sqlstore.sqlstatemanager.preparetoupdateph1=--> SqlStateManager.prepareToUpdatePhaseI(), type = {0}.
# sqlstore.sqlstatemanager.preparetoupdateph1.exit=<-- SqlStateManager.prepareToUpdateI().
sqlstore.sqlstatemanager.preparetoupdateph1.exit=<-- SqlStateManager.prepareToUpdateI().
# sqlstore.sqlstatemanager.preparetoupdateph2=--> SqlStateManager.prepareToUpdatePhaseII(), type = {0}.
sqlstore.sqlstatemanager.preparetoupdateph2=--> SqlStateManager.prepareToUpdatePhaseII(), type = {0}.
# sqlstore.sqlstatemanager.preparetoupdateph2.exit=<-- SqlStateManager.prepareToUpdateII().
sqlstore.sqlstatemanager.preparetoupdateph2.exit=<-- SqlStateManager.prepareToUpdateII().
# sqlstore.sqlstatemanager.preparetoupdateph3=--> SqlStateManager.prepareToUpdatePhaseIII(), type = {0}.
sqlstore.sqlstatemanager.preparetoupdateph3=--> SqlStateManager.prepareToUpdatePhaseIII(), type = {0}.
# sqlstore.sqlstatemanager.preparetoupdateph3.exit=<-- SqlStateManager.prepareToUpdateIII().
sqlstore.sqlstatemanager.preparetoupdateph3.exit=<-- SqlStateManager.prepareToUpdateIII().
# sqlstore.sqlstatemanager.reset=--> SqlStateManager.reset(), retValues = {0}, wasNew: {1}, keepState: {2}.
sqlstore.sqlstatemanager.reset=--> SqlStateManager.reset(), retValues = {0}, wasNew: {1}, keepState: {2}.
# sqlstore.sqlstatemanager.unsetmask=unsetting masks for field = {0}.
sqlstore.sqlstatemanager.unsetmask=unsetting masks for field = {0}.
# sqlstore.sqlstatemanager.resettingcollection=Resetting Collection.
sqlstore.sqlstatemanager.resettingcollection=Resetting Collection.
# sqlstore.sqlstatemanager.newtype=New Type: {0}.
sqlstore.sqlstatemanager.newtype=New Type: {0}.
# sqlstore.sqlstatemanager.resettingdate=Resetting Date.
sqlstore.sqlstatemanager.resettingdate=Resetting Date.
# sqlstore.sqlstatemanager.clearpersistencefields=--> SqlStateManager.clearPersistenceFields().
sqlstore.sqlstatemanager.clearpersistencefields=--> SqlStateManager.clearPersistenceFields().
# sqlstore.sqlstatemanager.clearpersistencefields.exit=<--- SqlStateManager.clearPersistenceFields().
sqlstore.sqlstatemanager.clearpersistencefields.exit=<--- SqlStateManager.clearPersistenceFields().
# sqlstore.sqlstatemanager.preparegetfield=--> SqlStateManager.prepareGetField(), name = {0}.
sqlstore.sqlstatemanager.preparegetfield=--> SqlStateManager.prepareGetField(), name = {0}.
# sqlstore.sqlstatemanager.preparegetfield.exit=<-- SqlStateManager.prepareGetField().
sqlstore.sqlstatemanager.preparegetfield.exit=<-- SqlStateManager.prepareGetField().
# sqlstore.sqlstatemanager.merge=--> SqlStateManager.merge(), type = {0}.
sqlstore.sqlstatemanager.merge=--> SqlStateManager.merge(), type = {0}.
# sqlstore.sqlstatemanager.merge.exit.noneed=<-- SqlStateManager.merge(),  merge not needed.
sqlstore.sqlstatemanager.merge.exit.noneed=<-- SqlStateManager.merge(),  merge not needed.
# sqlstore.sqlstatemanager.marking=marking : {0} as present.
sqlstore.sqlstatemanager.marking=marking : {0} as present.
# sqlstore.sqlstatemanager.merge.exit=<-- SqlStateManager.merge().
sqlstore.sqlstatemanager.merge.exit=<-- SqlStateManager.merge().
# sqlstore.sqlstatemanager.realizefield=--> SqlStateManager.realizeField(), name = {0}.
sqlstore.sqlstatemanager.realizefield=--> SqlStateManager.realizeField(), name = {0}.
# sqlstore.sqlstatemanager.realizefield.exit=<-- SqlStateManager.realizeField().
sqlstore.sqlstatemanager.realizefield.exit=<-- SqlStateManager.realizeField().
# sqlstore.sqlstatemanager.mergechanges=--> SqlStateManager.mergeChanges(), type = {0}.
sqlstore.sqlstatemanager.mergechanges=--> SqlStateManager.mergeChanges(), type = {0}.
# sqlstore.sqlstatemanager.merging=merging : {0}.
sqlstore.sqlstatemanager.merging=merging : {0}.
# sqlstore.sqlstatemanager.mergechanges.exit=<-- SqlStateManager.mergeChanges().
sqlstore.sqlstatemanager.mergechanges.exit=<-- SqlStateManager.mergeChanges().
# sqlstore.sqlstatemanager.getbeforeimage=--> SqlStateManager.getBeforeImage(), type = {0}.
sqlstore.sqlstatemanager.getbeforeimage=--> SqlStateManager.getBeforeImage(), type = {0}.
# sqlstore.sqlstatemanager.getbeforeimage.exit=<-- SqlStateManager.getBeforeImage().
sqlstore.sqlstatemanager.getbeforeimage.exit=<-- SqlStateManager.getBeforeImage().
# sqlstore.sqlstatemanager.isbeforeimagerequired=isBeforeImageRequired is : {0}.
sqlstore.sqlstatemanager.isbeforeimagerequired=isBeforeImageRequired is : {0}.
# sqlstore.sqlstatemanager.nosuchmethodexcep.clone=Exception : {0}  clone ... for type {1}.
sqlstore.sqlstatemanager.nosuchmethodexcep.clone=Exception : {0}  clone ... for type {1}.
# sqlstore.sqlstatemanager.prepareupdatefield=--> SQLStateManager.prepareUpdateField(), name = {0} for state: {1}.
sqlstore.sqlstatemanager.prepareupdatefield=--> SQLStateManager.prepareUpdateField(), name = {0} for state: {1}.
# sqlstore.sqlstatemanager.loggingfield=logging field ={0} with value={1}.
sqlstore.sqlstatemanager.loggingfield=logging field ={0} with value={1}.
# sqlstore.sqlstatemanager.recordingfield=recording field ={0}.
sqlstore.sqlstatemanager.recordingfield=recording field ={0}.
# sqlstore.sqlstatemanager.prepareupdatefield.exit=<-- SQLStateManager.prepareUpdateField().
sqlstore.sqlstatemanager.prepareupdatefield.exit=<-- SQLStateManager.prepareUpdateField().
# sqlstore.sqlstatemanager.updatebeforeimage=<-> SQLStateManager.updateBeforeImage(), name = {0}, value={1}.
sqlstore.sqlstatemanager.updatebeforeimage=<-> SQLStateManager.updateBeforeImage(), name = {0}, value={1}.
# sqlstore.sqlstatemanager.addupdate=<-> SQLStateManager.addUpdatedForeignReference(), lobj={0} , fobj = {1} , refCount = {2}.
sqlstore.sqlstatemanager.addupdate=<-> SQLStateManager.addUpdatedForeignReference(), lobj={0} , fobj = {1} , refCount = {2}.
# sqlstore.sqlstatemanager.removeupdate=<-> SQLStateManager.removeUpdatedForeignReference(), lobj={0} , fobj = {1} , refCount = {2}.
sqlstore.sqlstatemanager.removeupdate=<-> SQLStateManager.removeUpdatedForeignReference(), lobj={0} , fobj = {1} , refCount = {2}.
# sqlstore.sqlstatemanager.updateobjfield=--> SQLStateManager.updateObjectField(), name ={0} , type = {1}.
sqlstore.sqlstatemanager.updateobjfield=--> SQLStateManager.updateObjectField(), name ={0} , type = {1}.
# sqlstore.sqlstatemanager.updateobjfield.exit=<-- SQLStateManager.updateObjectField().
sqlstore.sqlstatemanager.updateobjfield.exit=<-- SQLStateManager.updateObjectField().
# sqlstore.sqlstatemanager.processcollectionupdate=--> SQLStateManager.processCollectionUpdates(), beforeList = {0}, afterlist={1}.
sqlstore.sqlstatemanager.processcollectionupdate=--> SQLStateManager.processCollectionUpdates(), beforeList = {0}, afterlist={1}.
# sqlstore.sqlstatemanager.processcollectionupdate.exit=<-- SQLStateManager.processCollectionUpdates().
sqlstore.sqlstatemanager.processcollectionupdate.exit=<-- SQLStateManager.processCollectionUpdates().
# sqlstore.sqlstatemanager.preparesetfieldspl=--> SQLStateManager.prepareSetFieldSpecial, name = {0} for state: {1}.
sqlstore.sqlstatemanager.preparesetfieldspl=--> SQLStateManager.prepareSetFieldSpecial, name = {0} for state: {1}.
# sqlstore.sqlstatemanager.preparesetfieldspl.exit=<-- SQLStateManager.prepareSetFieldSpecial().
sqlstore.sqlstatemanager.preparesetfieldspl.exit=<-- SQLStateManager.prepareSetFieldSpecial().
# sqlstore.sqlstatemanager.updatetrackedfields=--> updateTrackedFields(), f = {0} value = {1}  fieldToIgnore ={2}.
sqlstore.sqlstatemanager.updatetrackedfields=--> updateTrackedFields(), f = {0} value = {1}  fieldToIgnore ={2}.
# sqlstore.sqlstatemanager.updatetrackedfields.exit=<-- updateTrackedFields().
sqlstore.sqlstatemanager.updatetrackedfields.exit=<-- updateTrackedFields().
# sqlstore.sqlstatemanager.preparesetfield=--> SQLStateManager.prepareSetField(), name = {0}.
sqlstore.sqlstatemanager.preparesetfield=--> SQLStateManager.prepareSetField(), name = {0}.
# sqlstore.sqlstatemanager.preparesetfield.exit=<-- SQLStateManager.prepareSetField().
sqlstore.sqlstatemanager.preparesetfield.exit=<-- SQLStateManager.prepareSetField().
# sqlstore.sqlstatemanager.processforeignfield=-- SQLStateManager.processForeignField(): value:{0} type: {1}.
sqlstore.sqlstatemanager.processforeignfield=-- SQLStateManager.processForeignField(): value:{0} type: {1}.
# sqlstore.sqlstatemanager.processforeignfield.remove=-- SQLStateManager.processForeignField(): was Collection - remove.
sqlstore.sqlstatemanager.processforeignfield.remove=-- SQLStateManager.processForeignField(): was Collection - remove.
# sqlstore.sqlstatemanager.processforeignfield.reset=-- SQLStateManager.processForeignField(): was SCOCollection - reset.
sqlstore.sqlstatemanager.processforeignfield.reset=-- SQLStateManager.processForeignField(): was SCOCollection - reset.
# sqlstore.sqlstatemanager.processforeignfield.remove_from_bi=-- SQLStateManager.processForeignField(): is SCOCollection - remove from BI.
sqlstore.sqlstatemanager.processforeignfield.remove_from_bi=-- SQLStateManager.processForeignField(): is SCOCollection - remove from BI.
# sqlstore.sqlstatemanager.copychanges=--> SQLStateManager.copyChanges(), state manager = {0}.
sqlstore.sqlstatemanager.copychanges=--> SQLStateManager.copyChanges(), state manager = {0}.
# sqlstore.sqlstatemanager.copychanges.exit=<-- SQLStateManager.copyChanges().
sqlstore.sqlstatemanager.copychanges.exit=<-- SQLStateManager.copyChanges().
# sqlstore.sqlstatemanager.loadforread=--> SQLStateManager.loadForRead().
sqlstore.sqlstatemanager.loadforread=--> SQLStateManager.loadForRead().
# sqlstore.sqlstatemanager.loadforread.exit=<-- SQLStateManager.loadForRead().
sqlstore.sqlstatemanager.loadforread.exit=<-- SQLStateManager.loadForRead().
# sqlstore.sqlstatemanager.loadforupdate=--> SQLStateManager.loadForUpdate().
sqlstore.sqlstatemanager.loadforupdate=--> SQLStateManager.loadForUpdate().
# sqlstore.sqlstatemanager.loadforupdate.exit=<-- SQLStateManager.loadForUpdate().
sqlstore.sqlstatemanager.loadforupdate.exit=<-- SQLStateManager.loadForUpdate().

# sqlstore.resultdesc.deserializing=deserializing ={0}.
sqlstore.resultdesc.deserializing=deserializing ={0}.
# sqlstore.resultdesc.dvalue=dvalue ={0} value={1}.
sqlstore.resultdesc.dvalue=dvalue ={0} value={1}.
# sqlstore.resultdesc.returning_field=returning field {0} as projection.
sqlstore.resultdesc.returning_field=returning field {0} as projection.
# sqlstore.resultdesc.marking_field=marking local field  {0} as present.
sqlstore.resultdesc.marking_field=marking local field  {0} as present.
# sqlstore.resultdesc.marking_foreign_field=marking foreign field  {0} as present.
sqlstore.resultdesc.marking_foreign_field=marking foreign field  {0} as present.
# sqlstore.resultdesc.marking_key_field=marking key field  {0} as present.
sqlstore.resultdesc.marking_key_field=marking key field  {0} as present.

# sqlstore.sqlstoremanager.getpersistenceconfig=SQLStoreManager.getPersistenceConfig(), classType = {0}.
sqlstore.sqlstoremanager.getpersistenceconfig=SQLStoreManager.getPersistenceConfig(), classType = {0}.
# sqlstore.sqlstoremanager.executeupdate=--> SQLStoreManager.executeUpdate().
sqlstore.sqlstoremanager.executeupdate=--> SQLStoreManager.executeUpdate().
# sqlstore.sqlstoremanager.executeupdate.exit=<-- SQLStoreManager.executeUpdate(), rows affected = {0}.
sqlstore.sqlstoremanager.executeupdate.exit=<-- SQLStoreManager.executeUpdate(), rows affected = {0}.
# sqlstore.sqlstoremanager.executeupdatebatch=--> SQLStoreManager.executeUpdateBatch().
sqlstore.sqlstoremanager.executeupdatebatch=--> SQLStoreManager.executeUpdateBatch().
# sqlstore.sqlstoremanager.executeupdatebatch.exit=<-- SQLStoreManager.executeUpdateBatch(), rows affected = {0}.
sqlstore.sqlstoremanager.executeupdatebatch.exit=<-- SQLStoreManager.executeUpdateBatch(), rows affected = {0}.
# sqlstore.sqlstoremanager.vendortype=---SQLStoreManager: vendor type = {0}.
sqlstore.sqlstoremanager.vendortype=---SQLStoreManager: vendor type = {0}.
# sqlstore.sqlstoremanager.executeQuery=--> SQLStoreManager.executeQuery().
sqlstore.sqlstoremanager.executeQuery=--> SQLStoreManager.executeQuery().
# sqlstore.sqlstoremanager.executeQuery.exit=<-- SQLStoreManager.executeQuery().
sqlstore.sqlstoremanager.executeQuery.exit=<-- SQLStoreManager.executeQuery().
# sqlstore.sqlstoremanager.selectcollection=--> SQLStoreManager.selectCollection().
sqlstore.sqlstoremanager.selectcollection=--> SQLStoreManager.selectCollection().
# sqlstore.sqlstoremanager.plans=plans.size = {0} result.size = {1}.
sqlstore.sqlstoremanager.plans=plans.size = {0} result.size = {1}.
# sqlstore.sqlstoremanager.checkcorrelatedselect=--> SQLStoreManager.checkCorrelatedSelect().
sqlstore.sqlstoremanager.checkcorrelatedselect=--> SQLStoreManager.checkCorrelatedSelect().
# sqlstore.sqlstoremanager.plancorrelated=plan.correlated = {0} fieldMap.attrsize = {1} \nplan.orderby.size = {2}  plan.options = {3}.
sqlstore.sqlstoremanager.plancorrelated=plan.correlated = {0} fieldMap.attrsize = {1} \nplan.orderby.size = {2}  plan.options = {3}.
# sqlstore.sqlstoremanager.checkcorrelatedselect.exit=<-- SQLStoreManager.checkCorrelatedSelect().
sqlstore.sqlstoremanager.checkcorrelatedselect.exit=<-- SQLStoreManager.checkCorrelatedSelect().
# sqlstore.sqlstoremanager.selectnoncorrelated=--> SQLStoreManager.selectNonCorrelated().
sqlstore.sqlstoremanager.selectnoncorrelated=--> SQLStoreManager.selectNonCorrelated().
# sqlstore.sqlstoremanager.selectnoncorrelated.exit=<-- SQLStoreManager.selectNonCorrelated().
sqlstore.sqlstoremanager.selectnoncorrelated.exit=<-- SQLStoreManager.selectNonCorrelated().
# sqlstore.sqlstoremanager.selectcorrelated=--> SQLStoreManager.selectCorrelated().
sqlstore.sqlstoremanager.selectcorrelated=--> SQLStoreManager.selectCorrelated().
# sqlstore.sqlstoremanager.selectcorrelated.exit=<-- SQLStoreManager.selectCorrelated().
sqlstore.sqlstoremanager.selectcorrelated.exit=<-- SQLStoreManager.selectCorrelated().
# sqlstore.sqlstoremanager.categorization=categorization: useInstanceKey = {0} , useForeignKey = {1}.
sqlstore.sqlstoremanager.categorization=categorization: useInstanceKey = {0} , useForeignKey = {1}.

# sqlstore.connectionimpl.commit=--- ConnectionImpl.commit: connection closed.
sqlstore.connectionimpl.commit=--- ConnectionImpl.commit: connection closed.
# sqlstore.connectionimpl.rollback=--- ConnectionImpl.rollback:.
sqlstore.connectionimpl.rollback=--- ConnectionImpl.rollback:.
# sqlstore.connectionimpl.rollback.close=--- ConnectionImpl.rollback: connection closed.
sqlstore.connectionimpl.rollback.close=--- ConnectionImpl.rollback: connection closed.
# sqlstore.connectionimpl.close=---> ConnectionImpl.close ignore: .
sqlstore.connectionimpl.close=---> ConnectionImpl.close ignore: .
# sqlstore.connectionimpl.close_arg=---> ConnectionImpl.close ignore: .
sqlstore.connectionimpl.close_arg=---> ConnectionImpl.close ignore: .
# sqlstore.connectionimpl.close.freepending=<--- ConnectionImpl.close: set FreePending.
sqlstore.connectionimpl.close.freepending=<--- ConnectionImpl.close: set FreePending.
# sqlstore.connectionimpl.close.putfreelist=<--- ConnectionImpl.close: put in freeList.
sqlstore.connectionimpl.close.putfreelist=<--- ConnectionImpl.close: put in freeList.
# sqlstore.connectionimpl.close.exit=<--- ConnectionImpl.close: connection closed.
sqlstore.connectionimpl.close.exit=<--- ConnectionImpl.close: connection closed.
# sqlstore.connectionimpl.close.replaced=<--- ConnectionImpl.close: connection replaced.
sqlstore.connectionimpl.close.replaced=<--- ConnectionImpl.close: connection replaced.
# sqlstore.connectionimpl.close.connrelease=<--- ConnectionImpl.close: connection released.
sqlstore.connectionimpl.close.connrelease=<--- ConnectionImpl.close: connection released.
# sqlstore.connectionimpl.internalcommit=--- ConnectionImpl.internalCommit: .
sqlstore.connectionimpl.internalcommit=--- ConnectionImpl.internalCommit: .
# sqlstore.connectionimpl.clearxact=--- ConnectionImpl.clearXact: .
sqlstore.connectionimpl.clearxact=--- ConnectionImpl.clearXact: .
# sqlstore.connectionimpl.pendingdisassocxact=--- ConnectionImpl.clearXact: Pending disassociateXact.
sqlstore.connectionimpl.pendingdisassocxact=--- ConnectionImpl.clearXact: Pending disassociateXact.
# sqlstore.connectionimpl.clearxact.close=--- ConnectionImpl.clearXact: connection closed .
sqlstore.connectionimpl.clearxact.close=--- ConnectionImpl.clearXact: connection closed .
# sqlstore.connectionimpl.clearxact.disassocxact=--- ConnectionImpl.clearXact: disassociateXact .
sqlstore.connectionimpl.clearxact.disassocxact=--- ConnectionImpl.clearXact: disassociateXact .
# sqlstore.connectionimpl.finalize=--- ConnectionImpl.finalize: connection closed.
sqlstore.connectionimpl.finalize=--- ConnectionImpl.finalize: connection closed.
# sqlstore.database.dbvendor.vendorname=<-> DBVendorType(), vendorName = [ {0}] propertyName: {1}  short name: {2}.
sqlstore.database.dbvendor.vendorname=<-> DBVendorType(), vendorName = [ {0}] propertyName: {1}  short name: {2}.
# sqlstore.database.dbvendor.init=--> DBVendorType.initialize().
sqlstore.database.dbvendor.init=--> DBVendorType.initialize().
# sqlstore.database.dbvendor.init.default=--> DBVendorType.initialize().
sqlstore.database.dbvendor.init.default=--> DBVendorType.initialize().
# sqlstore.database.dbvendor.init.exit=<-- DBVendorType.initialize().
sqlstore.database.dbvendor.init.exit=<-- DBVendorType.initialize().
# sqlstore.database.dbvendor.load=--> DBVendorType.load() - resourceName: {0} , override: {1}.
sqlstore.database.dbvendor.load=--> DBVendorType.load() - resourceName: {0} , override: {1}.
# sqlstore.database.dbvendor.overrideproperties=<-> DBVendorType.overrideProperties() - NONE.
sqlstore.database.dbvendor.overrideproperties=<-> DBVendorType.overrideProperties() - NONE.
# sqlstore.database.dbvendor.overrideproperties.with=<-> DBVendorType.overrideProperties() : {0} with: {1}.
sqlstore.database.dbvendor.overrideproperties.with=<-> DBVendorType.overrideProperties() : {0} with: {1}.
# sqlstore.database.dbvendor.getleftjoin=<-> DBVendorType.getLeftJoin(): {0}.
sqlstore.database.dbvendor.getleftjoin=<-> DBVendorType.getLeftJoin(): {0}.
# sqlstore.database.dbvendor.getleftjoinpost=<-> DBVendorType.getLeftJoinPost(): {0}.
sqlstore.database.dbvendor.getleftjoinpost=<-> DBVendorType.getLeftJoinPost(): {0}.
# sqlstore.database.dbvendor.isupdatelocksupported=<-> DBVendorType.isUpdateLockSupported():{0}.
sqlstore.database.dbvendor.isupdatelocksupported=<-> DBVendorType.isUpdateLockSupported():{0}.
# sqlstore.database.dbvendor.isdistinctupdatelocksupported=<-> DBVendorType.isDistinctSupportedWithUpdateLock(): {0}.
sqlstore.database.dbvendor.isdistinctupdatelocksupported=<-> DBVendorType.isDistinctSupportedWithUpdateLock(): {0}.
# sqlstore.database.dbvendor.getholdlock=<-> DBVendorType.getHoldlock(): {0}.
sqlstore.database.dbvendor.getholdlock=<-> DBVendorType.getHoldlock(): {0}.
# sqlstore.database.dbvendor.getrightjoinipre=<-> DBVendorType.getRightJoin(): {0}.
sqlstore.database.dbvendor.getrightjoinipre=<-> DBVendorType.getRightJoin(): {0}.
# sqlstore.database.dbvendor.getisnull=<-> DBVendorType.getIsNull(): {0}.
sqlstore.database.dbvendor.getisnull=<-> DBVendorType.getIsNull(): {0}.
# sqlstore.database.dbvendor.getisnotnull=<-> DBVendorType.getIsNotNull(): {0}.
sqlstore.database.dbvendor.getisnotnull=<-> DBVendorType.getIsNotNull(): {0}.
# sqlstore.database.dbvendor.getnotequal=<-> DBVendorType.getNotEqual(): {0}.
sqlstore.database.dbvendor.getnotequal=<-> DBVendorType.getNotEqual(): {0}.
# sqlstore.database.dbvendor.getrtrim=<-> DBVendorType.getRtrim():{0}.
sqlstore.database.dbvendor.getrtrim=<-> DBVendorType.getRtrim():{0}.
# sqlstore.database.dbvendor.getrtrimpost=<-> DBVendorType.getRtrim():{0}.
sqlstore.database.dbvendor.getrtrimpost=<-> DBVendorType.getRtrim():{0}.
# sqlstore.database.dbvendor.getcharlength=<-> DBVendorType.getCharLength():{0}.
sqlstore.database.dbvendor.getcharlength=<-> DBVendorType.getCharLength():{0}.
# sqlstore.database.dbvendor.getsqrt=<-> DBVendorType.getSqrt():{0}.
sqlstore.database.dbvendor.getsqrt=<-> DBVendorType.getSqrt():{0}.
# sqlstore.database.dbvendor.getabs=<-> DBVendorType.getAbs():{0}.
sqlstore.database.dbvendor.getabs=<-> DBVendorType.getAbs():{0}.
# sqlstore.database.dbvendor.getforupdate=<-> DBVendorType.getAbs():{0}.
sqlstore.database.dbvendor.getforupdate=<-> DBVendorType.getAbs():{0}.
# sqlstore.database.dbvendor.gettableliststart=<-> DBVendorType.getTableListStart():{0}.
sqlstore.database.dbvendor.gettableliststart=<-> DBVendorType.getTableListStart():{0}.
# sqlstore.database.dbvendor.gettablelistend=<-> DBVendorType.getTableListEnd():{0}.
sqlstore.database.dbvendor.gettablelistend=<-> DBVendorType.getTableListEnd():{0}.
# sqlstore.database.dbvendor.getoptnocollective=<-> DBVendorType.getOptNoCollective():{0}.
sqlstore.database.dbvendor.getoptnocollective=<-> DBVendorType.getOptNoCollective():{0}.
# sqlstore.database.dbvendor.getstringconcat=<-> DBVendorType.getStringConcat():{0}.
sqlstore.database.dbvendor.getstringconcat=<-> DBVendorType.getStringConcat():{0}.
# sqlstore.database.dbvendor.getquotecharstart=<-> DBVendorType.getQuoteCharStart():{0}.
sqlstore.database.dbvendor.getquotecharstart=<-> DBVendorType.getQuoteCharStart():{0}.
# sqlstore.database.dbvendor.getsubstring=<-> DBVendorType.getSubstring():{0}.
sqlstore.database.dbvendor.getsubstring=<-> DBVendorType.getSubstring():{0}.
# sqlstore.database.dbvendor.getsubstringfrom=<-> DBVendorType.getSubstringFrom():{0}.
sqlstore.database.dbvendor.getsubstringfrom=<-> DBVendorType.getSubstringFrom():{0}.
# sqlstore.database.dbvendor.getsubstringfor=<-> DBVendorType.getSubstringFor():{0}.
sqlstore.database.dbvendor.getsubstringfor=<-> DBVendorType.getSubstringFor():{0}.
# sqlstore.database.dbvendor.getposition=<-> DBVendorType.getPosition():{0}.
sqlstore.database.dbvendor.getposition=<-> DBVendorType.getPosition():{0}.
# sqlstore.database.dbvendor.getpositionin=<-> DBVendorType.getPositionIn():{0}.
sqlstore.database.dbvendor.getpositionin=<-> DBVendorType.getPositionIn():{0}.
# sqlstore.database.dbvendor.getpositionsrchsrc=<-> DBVendorType.getPositionSearchSource():{0}.
sqlstore.database.dbvendor.getpositionsrchsrc=<-> DBVendorType.getPositionSearchSource():{0}.
# sqlstore.database.dbvendor.getposition3args=<-> DBVendorType.getPositionThreeArrgs():{0}.
sqlstore.database.dbvendor.getposition3args=<-> DBVendorType.getPositionThreeArrgs():{0}.
# sqlstore.database.dbvendor.mapemptystrtonull=<-> DBVendorType.mapEmptyStringToNull():{0}.
sqlstore.database.dbvendor.mapemptystrtonull=<-> DBVendorType.mapEmptyStringToNull():{0}.
# sqlstore.database.dbvendor.getSpecialDBOperation=<-> DBVendorType.getSpecialDBOperation():{0}.
sqlstore.database.dbvendor.getSpecialDBOperation=<-> DBVendorType.getSpecialDBOperation():{0}.
# sqlstore.database.dbvendor.supportslikeescape=<-> DBVendorType.supportsLikeEscape():{0}.
sqlstore.database.dbvendor.supportslikeescape=<-> DBVendorType.supportsLikeEscape():{0}.
# sqlstore.database.dbvendor.getleftlikeescape=<-> DBVendorType.getLeftLikeEscape():{0}.
sqlstore.database.dbvendor.getleftlikeescape=<-> DBVendorType.getLeftLikeEscape():{0}.
# sqlstore.database.dbvendor.getrightlikeescape=<-> DBVendorType.getRightLikeEscape():{0}.
sqlstore.database.dbvendor.getrightlikeescape=<-> DBVendorType.getRightLikeEscape():{0}.
# sqlstore.database.oracle.castpstmt=Expected OraclePreparedStatement. Found {0}.
sqlstore.database.oracle.castpstmt=Expected OraclePreparedStatement. Found {0}.
# sqlstore.database.oracle.defineCol=Failed to define column for statement.
sqlstore.database.oracle.defineCol=Failed to define column for statement.
# sqlstore.database.oracle.optimizationdisabled=Failed to load either oracle.jdbc.OraclePreparedStatement or oracle.jdbc.driver.OraclePreparedStatement. Oracle specific optimization will be disabled.
sqlstore.database.oracle.optimizationdisabled=Failed to load either oracle.jdbc.OraclePreparedStatement or oracle.jdbc.driver.OraclePreparedStatement. Oracle specific optimization will be disabled.

# sqlstore.persistencemgr.getbyobjid=---PersistenceManagerImpl.getObjectById() OID:{0}  for PersistenceManager: {1} and JTA: {2}.
sqlstore.persistencemgr.getbyobjid=---PersistenceManagerImpl.getObjectById() OID:{0}  for PersistenceManager: {1} and JTA: {2}.
# sqlstore.persistencemgr.getobjid= :{0} ---PersistenceManagerImpl.getObjectId() PC: {1} for PersistenceManager: {2} and JTA: {3}.
sqlstore.persistencemgr.getobjid= :{0} ---PersistenceManagerImpl.getObjectId() PC: {1} for PersistenceManager: {2} and JTA: {3}.
# sqlstore.persistencemgr.getobjid.notpc=---PersistenceManagerImpl.getObjectId() NOT PC: {0}  for PersistenceManager: {1}.
sqlstore.persistencemgr.getobjid.notpc=---PersistenceManagerImpl.getObjectId() NOT PC: {0}  for PersistenceManager: {1}.
# sqlstore.persistencemgr.getobjid.notpm=---PersistenceManagerImpl.getObjectId() NOT PM: {0} for PersistenceManager: {1}  and JTA: {2}.
sqlstore.persistencemgr.getobjid.notpm=---PersistenceManagerImpl.getObjectId() NOT PM: {0} for PersistenceManager: {1}  and JTA: {2}.
# sqlstore.persistencemgr.makepersistent= {0} ---PersistenceManagerImpl.makePersistent() PC: {1} for PersistenceManager: {2} and JTA: {3}.
sqlstore.persistencemgr.makepersistent= {0} ---PersistenceManagerImpl.makePersistent() PC: {1} for PersistenceManager: {2} and JTA: {3}.
# sqlstore.persistencemgr.makepersistent.done=---PersistenceManagerImpl.makePersistent() {0}  finished for: {1}  and JTA: {2}.
sqlstore.persistencemgr.makepersistent.done=---PersistenceManagerImpl.makePersistent() {0}  finished for: {1}  and JTA: {2}.
# sqlstore.persistencemgr.registerinstance= {0} ---PersistenceManagerImpl.registerInstance() oid: {1}  for PersistenceManager: {2}  and JTA: {3}.
sqlstore.persistencemgr.registerinstance= {0} ---PersistenceManagerImpl.registerInstance() oid: {1}  for PersistenceManager: {2}  and JTA: {3}.
# sqlstore.persistencemgr.registerinstancein_wkc=registerInstance in WKC.
sqlstore.persistencemgr.registerinstancein_wkc=registerInstance in WKC.
# sqlstore.persistencemgr.registerinstancein_txc=registerInstance in TXC :{0} / {1} for PersistenceManager: {2} and JTA: {3}.
sqlstore.persistencemgr.registerinstancein_txc=registerInstance in TXC :{0} / {1} for PersistenceManager: {2} and JTA: {3}.
# sqlstore.persistencemgr.deregisterinstance=---PersistenceManagerImpl.deregisterInstance() oid: {0}  for PersistenceManager: {1}  and JTA: {2}.
sqlstore.persistencemgr.deregisterinstance=---PersistenceManagerImpl.deregisterInstance() oid: {0}  for PersistenceManager: {1}  and JTA: {2}.
# sqlstore.persistencemgr.deregisterinstance.verify=---PersistenceManagerImpl.deregisterInstance() with verify SM -- oid: {0}  for PersistenceManager: {1}  and JTA: {2}.
sqlstore.persistencemgr.deregisterinstance.verify=---PersistenceManagerImpl.deregisterInstance() with verify SM -- oid: {0}  for PersistenceManager: {1}  and JTA: {2}.
# sqlstore.persistencemgr.deregisterinstance.verified=---PersistenceManagerImpl.deregisterInstance() -- deregistered with verify.
sqlstore.persistencemgr.deregisterinstance.verified=---PersistenceManagerImpl.deregisterInstance() -- deregistered with verify.
# sqlstore.persistencemgr.beforecompletion=---PersistenceManagerImpl.beforeCompletion().
sqlstore.persistencemgr.beforecompletion=---PersistenceManagerImpl.beforeCompletion().
# sqlstore.persistencemgr.aftercompletion=---PersistenceManagerImpl.afterCompletion() process: {0}.
sqlstore.persistencemgr.aftercompletion=---PersistenceManagerImpl.afterCompletion() process: {0}.
# sqlstore.persistencemgr.aftercompletion.process=---PersistenceManagerImpl.afterCompletion() process: {0}.
sqlstore.persistencemgr.aftercompletion.process=---PersistenceManagerImpl.afterCompletion() process: {0}.
# sqlstore.persistencemgr.newcollection=---PersistenceManagerImpl.newCollectionInstanceInternal() type: {0}.
sqlstore.persistencemgr.newcollection=---PersistenceManagerImpl.newCollectionInstanceInternal() type: {0}.
# sqlstore.persistencemgr.isoptimistic=---PersistenceManagerImpl.isOptimisticTransaction() : {0}.
sqlstore.persistencemgr.isoptimistic=---PersistenceManagerImpl.isOptimisticTransaction() : {0}.
# sqlstore.persistencemgr.isnontxread=---PersistenceManagerImpl.isNontransactionalRead() : {0}.
sqlstore.persistencemgr.isnontxread=---PersistenceManagerImpl.isNontransactionalRead() : {0}.
# sqlstore.persistencemgr.isactivetx=---PersistenceManagerImpl.isActiveTransaction() : {0}.
sqlstore.persistencemgr.isactivetx=---PersistenceManagerImpl.isActiveTransaction() : {0}.
# sqlstore.persistencemgr.getcurrentwrapper=---PersistenceManagerImpl.getCurrentWrapper() > current: {0}.
sqlstore.persistencemgr.getcurrentwrapper=---PersistenceManagerImpl.getCurrentWrapper() > current: {0}.
# sqlstore.persistencemgr.pushcurrentwrapper=---PersistenceManagerImpl.pushCurrentWrapper() > current: {0}  new: {1}.
sqlstore.persistencemgr.pushcurrentwrapper=---PersistenceManagerImpl.pushCurrentWrapper() > current: {0}  new: {1}.
# sqlstore.persistencemgr.popcurrentwrapper=---PersistenceManagerImpl.popCurrentWrapper() > current: {0}  prev: {1}.
sqlstore.persistencemgr.popcurrentwrapper=---PersistenceManagerImpl.popCurrentWrapper() > current: {0}  prev: {1}.
# sqlstore.persistencemgr.fetchinstance=--- PersistenceManagerImpl.fetchInstance(): CLASS for Oid: {0}.
sqlstore.persistencemgr.fetchinstance=--- PersistenceManagerImpl.fetchInstance(): CLASS for Oid: {0}.
# sqlstore.persistencemgr.loadingclass=Loading ... ClassName: {0}.
sqlstore.persistencemgr.loadingclass=Loading ... ClassName: {0}.
# sqlstore.persistencemgr.loadingfile=Loading ... FileName: {0} {1} {2}.
sqlstore.persistencemgr.loadingfile=Loading ... FileName: {0} {1} {2}.
# sqlstore.persistencemgr.assertisopen=--- PersistenceManagerImpl.assertIsOpen: CLOSED for {0}.
sqlstore.persistencemgr.assertisopen=--- PersistenceManagerImpl.assertIsOpen: CLOSED for {0}.
# sqlstore.persistencemgr.assertactivetx=--- PersistenceManagerImpl.assertActiveTransaction:  {0}.
sqlstore.persistencemgr.assertactivetx=--- PersistenceManagerImpl.assertActiveTransaction:  {0}.
# sqlstore.persistencemgr.assertactivetx.closed=--- PersistenceManagerImpl.assertActiveTransaction: Closed for  {0}.
sqlstore.persistencemgr.assertactivetx.closed=--- PersistenceManagerImpl.assertActiveTransaction: Closed for  {0}.
# sqlstore.persistencemgr.setkeyfields=---PersistenceManagerImpl.setKeyFields() ERROR: {0}.
sqlstore.persistencemgr.setkeyfields=---PersistenceManagerImpl.setKeyFields() ERROR: {0}.
# sqlstore.persistencemgr.internalcloneoid=---PersistenceManagerImpl.internalCloneOid() ERROR: {0}.
sqlstore.persistencemgr.internalcloneoid=---PersistenceManagerImpl.internalCloneOid() ERROR: {0}.
# sqlstore.persistencemgr.internalcloneoid.old=---PersistenceManagerImpl.internalCloneOid(): old: {0}  new: {1} same: {2}.
sqlstore.persistencemgr.internalcloneoid.old=---PersistenceManagerImpl.internalCloneOid(): old: {0}  new: {1} same: {2}.
# sqlstore.persistencemgr.acquiresharedlock=acquireShareLock(), thread {0} going to wait.
sqlstore.persistencemgr.acquiresharedlock=acquireShareLock(), thread {0} going to wait.
# sqlstore.persistencemgr.releasesharedlock=releaseShareLock(), thread {0} with _readWriteCount = {1}.
sqlstore.persistencemgr.releasesharedlock=releaseShareLock(), thread {0} with _readWriteCount = {1}.
# sqlstore.persistencemgr.acquireexclusivelock=acquireExclusiveock(), thread {0} going to wait.
sqlstore.persistencemgr.acquireexclusivelock=acquireExclusiveock(), thread {0} going to wait.
# sqlstore.persistencemgr.releaseexclusivelock=releaseExclusiveock(), thread {0} with _readWriteCount = {1}.
sqlstore.persistencemgr.releaseexclusivelock=releaseExclusiveock(), thread {0} with _readWriteCount = {1}.

# sqlstore.persistencemgr.acquireexclusivelock.count=acquireExclusiveLock(), thread {0} with _readWriteCount = {1}.
sqlstore.persistencemgr.acquireexclusivelock.count=acquireExclusiveLock(), thread {0} with _readWriteCount = {1}.
# sqlstore.sqlpersistencemgrfactory.pmCacheBucketSize=---SQLPersistenceManagerFactory pmCacheBucketSize = {0}.
sqlstore.sqlpersistencemgrfactory.pmCacheBucketSize=---SQLPersistenceManagerFactory pmCacheBucketSize = {0}.
# sqlstore.sqlpersistencemgrfactory.pmCacheInitialCapacity=---SQLPersistenceManagerFactory pmCacheInitialCapacity = {0}.
sqlstore.sqlpersistencemgrfactory.pmCacheInitialCapacity=---SQLPersistenceManagerFactory pmCacheInitialCapacity = {0}.
# sqlstore.sqlpersistencemgrfactory.getpersistencemgr=:{0} -->SQLPersistenceManagerFactory.getPersistenceManager().
sqlstore.sqlpersistencemgrfactory.getpersistencemgr=:{0} -->SQLPersistenceManagerFactory.getPersistenceManager().
# sqlstore.sqlpersistencemgrfactory.getpersistencemgr.found= {0} <->SQLPersistenceManagerFactory.getPersistenceManager() FOUND javax.transaction.Transaction: {1}.
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.found= {0} <->SQLPersistenceManagerFactory.getPersistenceManager() FOUND javax.transaction.Transaction: {1}.
# sqlstore.sqlpersistencemgrfactory.getpersistencemgr.pmclosedfor= {0} <->SQLPersistenceManagerFactory.getPersistenceManager() PM is CLOSED FOR: {1}.
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.pmclosedfor= {0} <->SQLPersistenceManagerFactory.getPersistenceManager() PM is CLOSED FOR: {1}.
# sqlstore.sqlpersistencemgrfactory.getpersistencemgr.jdotx=<->SQLPersistenceManagerFactory.getPersistenceManager() JDO Transaction: {0}.
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.jdotx=<->SQLPersistenceManagerFactory.getPersistenceManager() JDO Transaction: {0}.
# sqlstore.sqlpersistencemgrfactory.getpersistencemgr.jdotx.notfound=<->SQLPersistenceManagerFactory.getPersistenceManager() NOT FOUND JDO Transaction:.
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.jdotx.notfound=<->SQLPersistenceManagerFactory.getPersistenceManager() NOT FOUND JDO Transaction:.
# sqlstore.sqlpersistencemgrfactory.getpersistencemgr.pmt= {0} <->SQLPersistenceManagerFactory.getPersistenceManager() : {1} for JTA: {2}.
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.pmt= {0} <->SQLPersistenceManagerFactory.getPersistenceManager() : {1} for JTA: {2}.
# sqlstore.sqlpersistencemgrfactory.registerpersistencemgr.pmt=<->SQLPersistenceManagerFactory.registerPersistenceManager() PM: {0} for JTA Tx: {1}.
sqlstore.sqlpersistencemgrfactory.registerpersistencemgr.pmt=<->SQLPersistenceManagerFactory.registerPersistenceManager() PM: {0} for JTA Tx: {1}.
# sqlstore.sqlpersistencemgrfactory.getfrompool=<--SQLPersistenceManagerFactory.getFromPool().
sqlstore.sqlpersistencemgrfactory.getfrompool=<--SQLPersistenceManagerFactory.getFromPool().
# sqlstore.sqlpersistencemgrfactory.getfrompool.pmt=<--SQLPersistenceManagerFactory.getFromPool() PM: {0} for JTA {1}.
sqlstore.sqlpersistencemgrfactory.getfrompool.pmt=<--SQLPersistenceManagerFactory.getFromPool() PM: {0} for JTA {1}.
# sqlstore.sqlpersistencemgrfactory.returnToPool=<--SQLPersistenceManagerFactory.returnToPool().
sqlstore.sqlpersistencemgrfactory.returnToPool=<--SQLPersistenceManagerFactory.returnToPool().
# sqlstore.sqlpersistencemgrfactory.releasepm.pmt=---SQLPersistenceManagerFactory.releasePersistenceManager() PM:{0} for JTA Tx: {1}.
sqlstore.sqlpersistencemgrfactory.releasepm.pmt=---SQLPersistenceManagerFactory.releasePersistenceManager() PM:{0} for JTA Tx: {1}.
# sqlstore.sqlpersistencemgrfactory.init=---SQLPersistenceManagerFactory.initialize().
sqlstore.sqlpersistencemgrfactory.init=---SQLPersistenceManagerFactory.initialize().
# sqlstore.sqlpersistencemgrfactory.dbname=---SQLPersistenceManagerFactory: dbname = {0}.
sqlstore.sqlpersistencemgrfactory.dbname=---SQLPersistenceManagerFactory: dbname = {0}.

# sqlstore.transactionimpl.status={0} Tran[ {1} ].setStatus: {2} => {3} for {4}.
sqlstore.transactionimpl.status={0} Tran[ {1} ].setStatus: {2} => {3} for {4}.
# sqlstore.transactionimpl.call={0} Tran[ {1} ].{2}:status = {3} ,txType: {4} for  {5}.
sqlstore.transactionimpl.call={0} Tran[ {1} ].{2}:status = {3} ,txType: {4} for  {5}.
# sqlstore.transactionimpl.general={0}.
sqlstore.transactionimpl.general={0}.
# sqlstore.transactionimpl.call.info={0} Tran[ {1} ].{2}:{3} for  {4}.
sqlstore.transactionimpl.call.info={0} Tran[ {1} ].{2}:{3} for  {4}.
# sqlstore.transactionimpl.getconnection=--- TransactionImpl.getConnection(): {0} TX optimistic: {1}  referenceCount ={2}  for {3}.
sqlstore.transactionimpl.getconnection=--- TransactionImpl.getConnection(): {0} TX optimistic: {1}  referenceCount ={2}  for {3}.
# sqlstore.transactionimpl.releaseconnection=--- TransactionImpl.releaseConnection():  TX optimistic: {0}  Inside Commit: {1}  referenceCount: {2} for {3}.
sqlstore.transactionimpl.releaseconnection=--- TransactionImpl.releaseConnection():  TX optimistic: {0}  Inside Commit: {1}  referenceCount: {2} for {3}.
# sqlstore.transactionimpl.closeconnection=--- TransactionImpl.closeConnection() {0} for {1}.
sqlstore.transactionimpl.closeconnection=--- TransactionImpl.closeConnection() {0} for {1}.
# sqlstore.transactionimpl.rollbackconnection=--- TransactionImpl.rollbackConnection(): {0} for {1}.
sqlstore.transactionimpl.rollbackconnection=--- TransactionImpl.rollbackConnection(): {0} for {1}.
# sqlstore.model.classdesc.persistconfiginit=--> SqlPersistenceConfig.initialize(), class = {0}.
sqlstore.model.classdesc.persistconfiginit=--> SqlPersistenceConfig.initialize(), class = {0}.
# sqlstore.model.classdesc.persistconfiginit.exit=<-- SqlPersistenceConfig.initialize().
sqlstore.model.classdesc.persistconfiginit.exit=<-- SqlPersistenceConfig.initialize().
# sqlstore.model.classdesc.loadedclass=Successfully loaded oid class= {0}.
sqlstore.model.classdesc.loadedclass=Successfully loaded oid class= {0}.
# sqlstore.model.classdesc.fieldinfo=field name = {0}, id= {1}.
sqlstore.model.classdesc.fieldinfo=field name = {0}, id= {1}.
# sqlstore.model.classdesc.createsqldesc=creating SqlIDDesc from {0}.
sqlstore.model.classdesc.createsqldesc=creating SqlIDDesc from {0}.
# sqlstore.model.classdesc.pkfield=  PK field =  {0}.
sqlstore.model.classdesc.pkfield=  PK field =  {0}.
# sqlstore.model.classdesc.primarytrackedfield=field {0} is the primary tracked field .
sqlstore.model.classdesc.primarytrackedfield=field {0} is the primary tracked field .
# sqlstore.model.classdesc.unsetrefintegrityupdate=unsetting REF_INTEGRITY_UPDATES property for ff {0}.
sqlstore.model.classdesc.unsetrefintegrityupdate=unsetting REF_INTEGRITY_UPDATES property for ff {0}.
# sqlstore.model.classdesc.unsetconcurrencychk=unsetting IN_CONCURRENCY_CHECK property for lf  {0}.
sqlstore.model.classdesc.unsetconcurrencychk=unsetting IN_CONCURRENCY_CHECK property for lf  {0}.
# sqlstore.model.classdesc.general={0}.{1} =>{2}
sqlstore.model.classdesc.general={0}.{1} =>{2}
# sqlstore.model.classdesc.assocrelatedfield=associated relationship field = {0}.
sqlstore.model.classdesc.assocrelatedfield=associated relationship field = {0}.
# sqlstore.model.classdesc.getlocalfielddesc=<-> SqlPersistenceDesc.getLocalFieldDesc(), class ={0} added hidden field {1}  for column {2}.
sqlstore.model.classdesc.getlocalfielddesc=<-> SqlPersistenceDesc.getLocalFieldDesc(), class ={0} added hidden field {1}  for column {2}.
# sqlstore.model.fielddesc.setupdesc=setupDesc(): fieldName {0} fieldType {1}.
sqlstore.model.fielddesc.setupdesc=setupDesc(): fieldName {0} fieldType {1}.
# sqlstore.model.fielddesc.fieldname={0} = {1}.
sqlstore.model.fielddesc.fieldname={0} = {1}.
# sqlstore.model.fielddesc.convertvalue=convertValue: NULL ... return.
sqlstore.model.fielddesc.convertvalue=convertValue: NULL ... return.
# sqlstore.model.fielddesc.convertvalue.hidden=convertValue: hidden {0} ....return.
sqlstore.model.fielddesc.convertvalue.hidden=convertValue: hidden {0} ....return.
# sqlstore.model.fielddesc.convertvalue.from_to=convertValue: {0} From: {1} To: {2}.
sqlstore.model.fielddesc.convertvalue.from_to=convertValue: {0} From: {1} To: {2}.
# sqlstore.model.fielddesc.addingfield=adding field {0} to be tracked by field {1}.
sqlstore.model.fielddesc.addingfield=adding field {0} to be tracked by field {1}.
# sqlstore.sql.generator.selectqueryplan.processforeignfield=--> SelectQueryPlan.processForeignFields(), class = {0}.
sqlstore.sql.generator.selectqueryplan.processforeignfield=--> SelectQueryPlan.processForeignFields(), class = {0}.
# sqlstore.sql.generator.selectqueryplan.processforeignfield.exit=<-- SelectQueryPlan.processForeignFields().
sqlstore.sql.generator.selectqueryplan.processforeignfield.exit=<-- SelectQueryPlan.processForeignFields().
# sqlstore.sql.generator.selectqueryplan.processlocalfield=--> SelectQueryPlan.processLocalFields(), class = {0}.
sqlstore.sql.generator.selectqueryplan.processlocalfield=--> SelectQueryPlan.processLocalFields(), class = {0}.
# sqlstore.sql.generator.selectqueryplan.processlocalfield.exit=<-- SelectQueryPlan.processLocalFields().
sqlstore.sql.generator.selectqueryplan.processlocalfield.exit=<-- SelectQueryPlan.processLocalFields().
# sqlstore.sql.generator.selectqueryplan.processstmts=--> SelectQueryPlan.processStatements(), class = {0} , statements = {1}.
sqlstore.sql.generator.selectqueryplan.processstmts=--> SelectQueryPlan.processStatements(), class = {0} , statements = {1}.
# sqlstore.sql.generator.selectqueryplan.processstmts.exit=<-- SelectQueryPlan.processStatements().
sqlstore.sql.generator.selectqueryplan.processstmts.exit=<-- SelectQueryPlan.processStatements().
# sqlstore.sql.updateobjdescimpl.updated={0}  is updated.
sqlstore.sql.updateobjdescimpl.updated={0}  is updated.
# sqlstore.sql.concurrency.concurrencychkdirty=--> ConcurrencyCheckDirty.update(), beforeImage = {0}.
sqlstore.sql.concurrency.concurrencychkdirty=--> ConcurrencyCheckDirty.update(), beforeImage = {0}.
# sqlstore.sql.concurrency.concurrencychkdirty.exit=--> ConcurrencyCheckDirty.update().
sqlstore.sql.concurrency.concurrencychkdirty.exit=--> ConcurrencyCheckDirty.update().
# sqlstore.state.lifecyclestate.initial=LifeCycleState.getLifeCycleState(), initial state = {0}.
sqlstore.state.lifecyclestate.initial=LifeCycleState.getLifeCycleState(), initial state = {0}.
# sqlstore.state.lifecyclestate.changestate=LifeCycleState.changeState(), old state = {0} , new state = {1}.
sqlstore.state.lifecyclestate.changestate=LifeCycleState.changeState(), old state = {0} , new state = {1}.
# sqlstore.connection.conncectiomgr.found=<--> ConnectionManager.getConnection: found {0}.
sqlstore.connection.conncectiomgr.found=<--> ConnectionManager.getConnection: found {0}.
# sqlstore.connection.conncectiomgr.getnewconn=<--> ConnectionManager.getConnection: new {0}.
sqlstore.connection.conncectiomgr.getnewconn=<--> ConnectionManager.getConnection: new {0}.
# sqlstore.connection.conncectiomgr.replacefreeconn=<--> ConnectionManager.replaceFreeConnection: free {0}.
sqlstore.connection.conncectiomgr.replacefreeconn=<--> ConnectionManager.replaceFreeConnection: free {0}.
# sqlstore.sql.concurrencyoptverify.suspendtx=<--> ConcurrencyOptVerify.suspend(), suspended transaction = {0}.
sqlstore.sql.concurrencyoptverify.suspendtx=<--> ConcurrencyOptVerify.suspend(), suspended transaction = {0}.
# sqlstore.sql.concurrencyoptverify.resumetx=<--> ConcurrencyOptVerify.resume(), resumed transaction = {0}.
sqlstore.sql.concurrencyoptverify.resumetx=<--> ConcurrencyOptVerify.resume(), resumed transaction = {0}.
# sqlstore.sql.concurrencyoptverify.update=--> ConcurrencyOptVerify.update(), beforeImage = {0}.
sqlstore.sql.concurrencyoptverify.update=--> ConcurrencyOptVerify.update(), beforeImage = {0}.
# sqlstore.sql.concurrencyoptverify.update.exit=<-- ConcurrencyOptVerify.update().
sqlstore.sql.concurrencyoptverify.update.exit=<-- ConcurrencyOptVerify.update().
# sqlstore.persistencemgr.acquiresharedlock.rdwrcount=acquireShareLock(), thread {0} acquired shared lock with _readWriteCount ={1}.
sqlstore.persistencemgr.acquiresharedlock.rdwrcount=acquireShareLock(), thread {0} acquired shared lock with _readWriteCount ={1}.
# sqlstore.model.filedesc.getdeclaredfiled.fail=Failed to getDeclaredField: {0}.
sqlstore.model.filedesc.getdeclaredfiled.fail=Failed to getDeclaredField: {0}.
# sqlstore.exception.log=Exception.
sqlstore.exception.log=Exception.
# sqlstore.sql.generator.updatedescimpl.beforeimagenull=BeforeImage is not set.
sqlstore.sql.generator.updatedescimpl.beforeimagenull=BeforeImage is not set.
# sqlstore.sql.generator.updatedescimpl.afterimagenull=AfterImage is not set.
sqlstore.sql.generator.updatedescimpl.afterimagenull=AfterImage is not set.

# sqlstore.sql.generator.dbstatement.bindinputcolumn=bindInputColumn index: {0} value: {1} sqlType: {2}.
sqlstore.sql.generator.dbstatement.bindinputcolumn=bindInputColumn index: {0} value: {1} sqlType: {2}.
# sqlstore.sql.generator.dbstatement.addbatch=addbatch ({0})
sqlstore.sql.generator.dbstatement.addbatch=addbatch ({0})
# sqlstore.sql.generator.dbstatement.executebatch=executeBatch executing {0} command(s)
sqlstore.sql.generator.dbstatement.executebatch=executeBatch executing {0} command(s)
# sqlstore.sql.generator.statement.likeescapenotsupported=LIKE ESCAPE clause is not supported on this database.
sqlstore.sql.generator.statement.likeescapenotsupported=LIKE ESCAPE clause is not supported on this database.
# sqlstore.sql.generator.statement.positionthreeargsnotsupported=Third arg for POSITION clause must be 1.
sqlstore.sql.generator.statement.positionthreeargsnotsupported=Third arg for POSITION clause must be 1.
