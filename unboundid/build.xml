<!--
 ! Copyright 2007-2021 Ping Identity Corporation
 ! All Rights Reserved.
 -->
<!--
 ! Copyright 2007-2021 Ping Identity Corporation
 !
 ! Licensed under the Apache License, Version 2.0 (the "License");
 ! you may not use this file except in compliance with the License.
 ! You may obtain a copy of the License at
 !
 !    http://www.apache.org/licenses/LICENSE-2.0
 !
 ! Unless required by applicable law or agreed to in writing, software
 ! distributed under the License is distributed on an "AS IS" BASIS,
 ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ! See the License for the specific language governing permissions and
 ! limitations under the License.
 -->
<!--
 ! Copyright (C) 2007-2021 Ping Identity Corporation
 !
 ! This program is free software; you can redistribute it and/or modify
 ! it under the terms of the GNU General Public License (GPLv2 only)
 ! or the terms of the GNU Lesser General Public License (LGPLv2.1 only)
 ! as published by the Free Software Foundation.
 !
 ! This program is distributed in the hope that it will be useful,
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of
 ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ! GNU General Public License for more details.
 !
 ! You should have received a copy of the GNU General Public License
 ! along with this program; if not, see <http://www.gnu.org/licenses>.
 -->
<project name="UnboundID LDAP SDK for Java" basedir="." default="package">

  <description>
    This project provides a Java SDK that can be used to communicate with a
    directory server using LDAPv3.
  </description>


  <!-- Define a number of project-wide properties -->
  <property name="src.dir"         location="src" />
  <property name="build-src.dir"   location="build-src" />
  <property name="gen-src.dir"     location="gen-src" />
  <property name="build.dir"       location="build" />
  <property name="docs.dir"        location="docs" />
  <property name="dist-root.dir"   location="dist-root" />
  <property name="resource.dir"    location="resource" />
  <property name="classes.dir"     location="${build.dir}/classes" />
  <property name="lib.dir"         location="${build.dir}/lib" />
  <property name="package.dir"     location="${build.dir}/package" />


  <!-- Define properties used for processing message files. -->
  <property name="messages.dir"         location="messages" />
  <property name="messages.src.dir"     location="${build-src.dir}/messages" />
  <property name="messages.classes.dir" location="${build.dir}/messages" />
  <property name="messages.gensrc.dir"  location="${gen-src.dir}/messages" />


  <!-- Define properties used for sanity checking the build. -->
  <property name="sc.src.dir"     location="${build-src.dir}/sanitycheck" />
  <property name="sc.classes.dir" location="${build.dir}/sanitycheck" />


  <!-- Define properties used for copying the documentation into place. -->
  <property name="copydocs.src.dir"     location="${build-src.dir}/copydocs" />
  <property name="copydocs.classes.dir" location="${build.dir}/copydocs" />


  <!-- Define properties used for generating tool usage information. -->
  <property name="toolusage.src.dir"
            location="${build-src.dir}/toolusage" />
  <property name="toolusage.classes.dir" location="${build.dir}/toolusage" />


  <!-- Define properties used for generating file digests. -->
  <property name="digest.src.dir"     location="${build-src.dir}/digest" />
  <property name="digest.classes.dir" location="${build.dir}/digest" />


  <!-- Define properties used for checkstyle analysis. -->
  <property name="checkstyle.dir"        location="ext/checkstyle" />


  <!-- Define properties used for getting source repository information. -->
  <property name="repository-info.src.dir"
            location="${build-src.dir}/repositoryinfo" />
  <property name="repository-info.classes.dir"
            location="${build.dir}/repositoryinfo" />
  <property name="repository-info.fail-on-error" value="true" />
  <property name="svnkit.dir" location="ext/svnkit" />
  <property name="jgit.dir" location="ext/jgit" />
  <property name="slf4j.dir" location="ext/slf4j" />


  <!-- Define properties used for unit testing. -->
  <property name="testng.dir"        location="ext/testng" />
  <property name="testng.fileset.dir"
            location="${build.dir}/testng-fileset" />
  <property name="testng.fileset.src.dir"
            location="${build-src.dir}/testngfileset" />
  <property name="testng.fileset.classes.dir"
            location="${testng.fileset.dir}/classes" />
  <property name="testng.fileset.descriptor"
            location="${testng.fileset.dir}/ldapsdk-fileset.xml" />
  <property name="unit.src.dir"      location="tests/unit/src" />
  <property name="unit.classes.dir"  location="${build.dir}/test/classes" />
  <property name="unit.report.dir"   location="${build.dir}/test/report" />
  <property name="unit.temp.dir"     location="${build.dir}/test/temp" />
  <property name="unit.resource.dir" location="tests/unit/resource" />


  <!-- Define properties used for code coverage. -->
  <property name="jacoco.dir" location="ext/jacoco" />
  <property name="coverage.dir" location="${build.dir}/coverage" />
  <property name="coverage.report.dir" location="${coverage.dir}/report" />
  <property name="coverage.out.file" location="${coverage.dir}/jacoco.exec" />
  <property name="coverage.merged.file"
            location="${coverage.dir}/merged.exec" />


  <!-- Define the amount of memory to use for forked VMs -->
  <property name="MEM" value="768M" />


  <!-- Define a number of version-related properties. -->
  <loadproperties srcFile="version.properties" />
  <property name="MMP"
            value="${MAJOR_VERSION}.${MINOR_VERSION}.${POINT_VERSION}" />
  <property name="MMPQ" value="${MMP}${VERSION_QUALIFIER}" />



  <!-- Clean up after an earlier build. -->
  <target name="clean" description="Clean up after an earlier build">
    <delete dir="${build.dir}" />
  </target>



  <!-- Generate message source files. -->
  <target name="generate-messages"
          description="Generate message file enumerations">
    <!-- Recreate the build/messages directory if necessary. -->
    <delete dir="${messages.classes.dir}" />
    <mkdir dir="${build.dir}" />
    <mkdir dir="${messages.classes.dir}" />

    <!-- Compile the Ant task used to generate the messages source files. -->
    <javac srcdir="${messages.src.dir}" destdir="${messages.classes.dir}"
           source="1.7" target="1.7" deprecation="true" fork="true"
           memoryInitialSize="${MEM}" memoryMaximumSize="${MEM}"
           optimize="true" debug="on" debuglevel="lines,source,vars"
           includeAntRuntime="true">
      <compilerarg value="-Xlint:all" />
    </javac>

    <!-- Define and invoke the task. -->
    <taskdef name="generateMessagesTask"
             className="com.unboundid.buildtools.messages.GenerateMessages">
      <classpath>
        <pathelement location="${messages.classes.dir}" />
      </classpath>
    </taskdef>

    <delete dir="${messages.gensrc.dir}" />
    <mkdir  dir="${messages.gensrc.dir}" />
    <generateMessagesTask propertiesDir="${messages.dir}"
                          generatedSourceDir="${messages.gensrc.dir}" />
  </target>



  <!-- Generate a Version source file. -->
  <target name="generate-version" depends="repository-info"
          description="Generate a Version.java source file">
    <tstamp>
      <format property="timestamp" pattern="yyyyMMddHHmmss'Z'" timezone="UTC" />
    </tstamp>

    <tstamp>
      <format property="year" pattern="yyyy" timezone="UTC" />
    </tstamp>

    <loadproperties srcFile="version.properties" />

    <condition property="repository-info.path" value="{unknown}">
      <not>
        <isset property="repository-info.path" />
      </not>
    </condition>

    <condition property="repository-info.revision" value="{unknown}">
      <not>
        <isset property="repository-info.revision" />
      </not>
    </condition>

    <delete file="${src.dir}/com/unboundid/ldap/sdk/Version.java" />
    <copy file="${resource.dir}/Version.java.stub"
          tofile="${src.dir}/com/unboundid/ldap/sdk/Version.java"
          overwrite="true">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
  </target>



  <!-- Compile the Java source files. -->
  <target name="compile" description="Compile the Java source files"
          depends="clean,generate-messages,generate-version">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${classes.dir}" />

    <javac srcdir="${messages.gensrc.dir}" destdir="${classes.dir}"
           source="1.7" target="1.7" deprecation="true" fork="true"
           memoryInitialSize="${MEM}" memoryMaximumSize="${MEM}"
           optimize="true" debug="on" debuglevel="lines,source,vars"
           includeAntRuntime="false">
      <compilerarg value="-Xlint:all" />
    </javac>

    <javac srcdir="${src.dir}" destdir="${classes.dir}" source="1.7"
           target="1.7" deprecation="true" fork="true"
           memoryInitialSize="${MEM}" memoryMaximumSize="${MEM}"
           optimize="true" debug="on" debuglevel="lines,source,vars"
           includeAntRuntime="false">
      <compilerarg value="-Xlint:all" />
      <classpath>
        <pathelement location="${classes.dir}" />
      </classpath>
    </javac>

    <copy todir="${classes.dir}">
      <fileset dir="${messages.dir}">
        <include name="*.properties" />
      </fileset>
    </copy>

    <copy file="${resource.dir}/standard-schema.ldif"
          toDir="${classes.dir}/com/unboundid/ldap/sdk/schema/"
          overwrite="true" />
    <copy file="${resource.dir}/oid-registry.json"
          toDir="${classes.dir}/com/unboundid/util/"
          overwrite="true" />
  </target>



  <!-- Perform checkstyle analysis on the code. -->
  <target name="checkstyle" description="Validate source code style"
          depends="compile">
    <condition property="checkstyle-target" value="no-op">
      <and>
        <isset property="checkstyle.enabled" />
        <equals arg1="${checkstyle.enabled}" arg2="false"
                caseSensitive="false" />
      </and>
    </condition>
    <condition property="checkstyle-target" value="do-checkstyle">
      <not>
        <isset property="checkstyle-target" />
      </not>
    </condition>
    <antcall target="${checkstyle-target}" />
  </target>

  <target name="checkstyle-setup">
    <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties"
             classpath="${checkstyle.dir}/checkstyle-6.19-all.jar"/>
  </target>

  <target name="do-checkstyle" depends="checkstyle-setup">
    <echo message="NOTE:  The version of Checkstyle used by the LDAP SDK" />
    <echo message="       (which is needed to support building on Java 7)" />
    <echo message="       depends on a JDK component that was removed in" />
    <echo message="       Java 9.  If the build fails on Java 9 or later" />
    <echo message="       with a message like 'Unable to create a" />
    <echo message="       Checker', you will need to add" />
    <echo message="       '-Dcheckstyle.enabled=false' to the command used" />
    <echo message="       to build the LDAP SDK." />

    <checkstyle config="${checkstyle.dir}/ldapsdk-checkstyle.xml"
                classpath="${classes.dir}" failOnViolation="true">
      <fileset dir="${src.dir}" includes="**/*.java"
               excludes="**/Version.java" />
      <fileset dir="${build-src.dir}" includes="**/*.java" />
      <fileset dir="android-ldap-client" includes="**/*.java" />
      <formatter type="plain" />
    </checkstyle>

    <checkstyle config="${checkstyle.dir}/ldapsdk-unit-checkstyle.xml"
                classpath="${classes.dir}" failOnViolation="true">
      <fileset dir="${unit.src.dir}" includes="**/*.java" />
      <formatter type="plain" />
    </checkstyle>
  </target>



  <!-- Create a distributable package including the JAR file, docs, etc. -->
  <target name="package" description="Create a distributable package"
          depends="compile,define-copydocs,define-toolusage,checkstyle">
    <mkdir dir="${package.dir}" />

    <property name="base-name"
              value="${SHORT_NAME}-${MAJOR_VERSION}.${MINOR_VERSION}.${POINT_VERSION}${VERSION_QUALIFIER}" />

    <property name="sdk.package.dir"
              location="${package.dir}/${base-name}" />

    <mkdir dir="${sdk.package.dir}" />
    <mkdir dir="${sdk.package.dir}/android-ldap-client" />
    <mkdir dir="${sdk.package.dir}/docs" />
    <mkdir dir="${sdk.package.dir}/docs/javadoc" />

    <copy todir="${sdk.package.dir}">
      <fileset dir="${dist-root.dir}">
        <include name="**/*" />
        <exclude name="**/.svn" />
        <exclude name="**/.git" />
      </fileset>
    </copy>

    <copydocs sourceDir="${docs.dir}" destinationDir="${sdk.package.dir}/docs"
              headerFile="${resource.dir}/localdoc.header"
              footerFile="${resource.dir}/localdoc.footer" extension="html"
              target="offline" ldapSdkHomeUrl="${LDAP_SDK_HOME_URL}"
              ldapSdkDocsBaseUrl="${LDAP_SDK_DOCS_BASE_URL}" />

    <copy todir="${sdk.package.dir}/docs">
      <fileset dir="${sdk.package.dir}">
        <include name="LICENSE*.txt" />
      </fileset>
      <fileset dir="${resource.dir}">
        <include name="standard-schema.ldif" />
      </fileset>
    </copy>

    <copy todir="${sdk.package.dir}/docs/examples">
      <fileset dir="${src.dir}/com/unboundid/ldap/sdk/examples">
        <include name="*.java" />
        <exclude name="**/package-info.java" />
      </fileset>
      <fileset dir="${src.dir}/com/unboundid/ldap/sdk/unboundidds/examples">
        <include name="*.java" />
        <exclude name="**/package-info.java" />
      </fileset>
    </copy>

    <property name="toolusage.localdocs.dir"
              location="${sdk.package.dir}/docs/tool-usages" />
    <mkdir dir="${toolusage.localdocs.dir}" />
    <toolusage outputDirectory="${toolusage.localdocs.dir}" />

    <copy todir="${sdk.package.dir}/android-ldap-client">
      <fileset dir="android-ldap-client">
        <exclude name="**/.svn" />
        <exclude name="**/.git" />
      </fileset>
    </copy>

    <property name="VER" value=";version=&quot;${MMP}&quot;" />

    <jar jarfile="${sdk.package.dir}/unboundid-ldapsdk.jar"
         compress="true"
         index="true">
      <fileset dir="${classes.dir}" />
      <fileset dir="${dist-root.dir}">
        <include name="LICENSE*.txt" />
      </fileset>
      <manifest>
        <attribute name="Main-Class"
                   value="com.unboundid.ldap.sdk.unboundidds.Launcher" />
        <attribute name="Build-Time" value="${timestamp}" />
        <attribute name="Implementation-Title" value="${PRODUCT_NAME}" />
        <attribute name="Implementation-Version" value="${MMPQ}" />
        <attribute name="Source-Path" value="${repository-info.path}" />
        <attribute name="Source-Revision" value="${repository-info.revision}" />
        <attribute name="Implementation-Vendor" value="Ping Identity" />
        <attribute name="Implementation-URL"
                   value="https://github.com/pingidentity/ldapsdk" />
        <attribute name="Bundle-ManifestVersion" value="2" />
        <attribute name="Bundle-Copyright"
                   value="Copyright 2008-${year} Ping Identity Corporation" />
        <attribute name="Bundle-Name" value="UnboundID LDAP SDK for Java" />
        <attribute name="Bundle-SymbolicName" value="com.unboundid.ldap.sdk" />
        <attribute name="Bundle-Vendor" value="Ping Identity" />
        <attribute name="Bundle-Version" value="${MMP}" />
        <attribute name="Bundle-RequiredExecutionEnvironment"
                   value="JavaSE-1.7" />
        <attribute name="Bundle-Category" value="communication,network" />
        <attribute name="Bundle-DocURL"
                   value="${LDAP_SDK_HOME_URL}" />
        <attribute name="Export-Package"
                   value="com.unboundid.asn1${VER},com.unboundid.ldap.listener${VER},com.unboundid.ldap.listener.interceptor${VER},com.unboundid.ldap.matchingrules${VER},com.unboundid.ldap.sdk${VER},com.unboundid.ldap.sdk.controls${VER},com.unboundid.ldap.sdk.experimental${VER},com.unboundid.ldap.sdk.extensions${VER},com.unboundid.ldap.sdk.migrate.jndi${VER},com.unboundid.ldap.sdk.migrate.ldapjdk${VER},com.unboundid.ldap.sdk.persist${VER},com.unboundid.ldap.sdk.schema${VER},com.unboundid.ldap.sdk.transformations${VER},com.unboundid.ldap.sdk.unboundidds${VER},com.unboundid.ldap.sdk.unboundidds.controls${VER},com.unboundid.ldap.sdk.unboundidds.extensions${VER},com.unboundid.ldap.sdk.unboundidds.jsonfilter${VER},com.unboundid.ldap.sdk.unboundidds.logs${VER},com.unboundid.ldap.sdk.unboundidds.monitors${VER},com.unboundid.ldap.sdk.unboundidds.tasks${VER},com.unboundid.ldap.sdk.unboundidds.tools${VER},com.unboundid.ldif${VER},com.unboundid.util${VER},com.unboundid.util.args${VER},com.unboundid.util.json${VER},com.unboundid.util.ssl${VER},com.unboundid.util.ssl.cert${VER}" />
        <attribute name="Import-Package"
                   value="javax.crypto,javax.crypto.spec,javax.naming,javax.naming.directory,javax.naming.ldap,javax.net,javax.net.ssl,javax.security.auth,javax.security.auth.callback,javax.security.auth.login,javax.security.auth.x500,javax.security.sasl" />
        <attribute name="Sealed" value="true" />
      </manifest>
    </jar>

    <javadoc destdir="${sdk.package.dir}/docs/javadoc" source="1.7"
             useexternalfile="true"
             additionalparam="-quiet" linksource="yes"
             windowtitle="UnboundID LDAP SDK for Java ${MMPQ}"
             doctitle="UnboundID LDAP SDK for Java&lt;br&gt;${MMPQ}"
             maxmemory="${MEM}" access="protected"
             bottom="&lt;div id=&quot;footer&quot;&gt;Copyright &amp;copy; 2008-${year} &amp;ndash; Ping Identity &amp;ndash; All Rights Reserved.&lt;/div&gt;">
      <fileset dir="${src.dir}" defaultexcludes="yes">
        <exclude name="**/*Helper*" />
        <exclude name="**/*InteractiveTransaction*" />
        <exclude name="**/*Constants*" />
        <exclude name="com/unboundid/util/parallel/**" />
      </fileset>
      <classpath>
        <pathelement location="${classes.dir}" />
      </classpath>
    </javadoc>

    <delete file="${sdk.package.dir}/docs/javadoc/resources/inherit.gif" />
    <copy file="${resource.dir}/inherit.gif"
          toFile="${sdk.package.dir}/docs/javadoc/resources/inherit.gif" />

    <fixcrlf srcDir="${sdk.package.dir}/tools" excludes="*.bat" eol="lf" />
    <fixcrlf srcDir="${sdk.package.dir}/tools" includes="*.bat" eol="crlf" />
    <chmod perm="755">
      <fileset dir="${sdk.package.dir}/tools">
        <exclude name="*.bat" />
      </fileset>
    </chmod>

    <zip destfile="${sdk.package.dir}/src.zip"
         compress="true">
      <zipfileset dir="${src.dir}" filemode="644" dirmode="755" />
      <zipfileset dir="${messages.gensrc.dir}" filemode="644" dirmode="755" />
      <zipfileset dir="${messages.dir}" filemode="644" dirmode="755" />
    </zip>

    <zip destfile="${package.dir}/${base-name}.zip" compress="true">
      <zipfileset dir="${package.dir}" includes="${base-name}/**/*"
                  filemode="644" dirmode="755">
        <exclude name="${base-name}/tools/*" />
      </zipfileset>
      <zipfileset dir="${package.dir}" filemode="644" dirmode="755">
        <include name="${base-name}/tools/*.bat" />
      </zipfileset>
      <zipfileset dir="${package.dir}" filemode="755" dirmode="755">
        <include name="${base-name}/tools/*" />
        <exclude name="${base-name}/tools/*.bat" />
      </zipfileset>
    </zip>

    <!-- Sign the zip file.  This will only actually be done for
          release builds (if the env.GPG_PASSPHRASE property is set). -->
    <antcall target="sign-ldap-sdk-zip-file" />

    <antcall target="create-maven-repository" />

    <antcall target="generate-website-docs" />

    <antcall target="sanity-check" inheritAll="true" inheritRefs="true" />
  </target>



  <!-- Define the task used to copy the documentation into place. -->
  <target name="define-copydocs">
    <mkdir dir="${copydocs.classes.dir}" />
    <javac srcdir="${copydocs.src.dir}" destdir="${copydocs.classes.dir}"
           source="1.7" target="1.7" deprecation="true" fork="true"
           memoryInitialSize="${MEM}" memoryMaximumSize="${MEM}"
           optimize="true" debug="on" debuglevel="lines,source,vars"
           includeAntRuntime="true">
      <compilerarg value="-Xlint:all" />
    </javac>

    <taskdef name="copydocs"
             className="com.unboundid.buildtools.copydocs.CopyDocs">
      <classpath>
        <pathelement location="${copydocs.classes.dir}" />
      </classpath>
    </taskdef>
  </target>



  <!-- Define the task used to generate tool usage information. -->
  <target name="define-toolusage">
    <mkdir dir="${toolusage.classes.dir}" />
    <javac srcdir="${toolusage.src.dir}" destdir="${toolusage.classes.dir}"
           source="1.7" target="1.7" deprecation="true" fork="true"
           memoryInitialSize="${MEM}" memoryMaximumSize="${MEM}"
           optimize="true" debug="on" debuglevel="lines,source,vars"
           includeAntRuntime="true">
      <compilerarg value="-Xlint:all" />
      <classpath>
        <pathelement location="${classes.dir}" />
      </classpath>
    </javac>

    <taskdef name="toolusage"
             className="com.unboundid.buildtools.toolusage.GenerateToolUsage">
      <classpath>
        <pathelement location="${toolusage.classes.dir}" />
        <pathelement location="${classes.dir}" />
      </classpath>
    </taskdef>
  </target>



  <!-- Generate the appropriate structure for a Maven repository. -->
  <target name="create-maven-repository">
    <property name="maven.dir"
              location="${package.dir}/unboundid-ldapsdk-${MMPQ}-maven" />
    <mkdir dir="${maven.dir}" />

    <copy file="${sdk.package.dir}/unboundid-ldapsdk.jar"
          toFile="${maven.dir}/unboundid-ldapsdk-${MMPQ}.jar" />
    <copy file="${sdk.package.dir}/src.zip"
          toFile="${maven.dir}/unboundid-ldapsdk-${MMPQ}-sources.jar" />
    <jar jarfile="${maven.dir}/unboundid-ldapsdk-${MMPQ}-javadoc.jar"
         compress="true"
         index="true">
      <fileset dir="${sdk.package.dir}/docs/javadoc" />
    </jar>


    <!-- Copy the POM into place. -->
    <copy file="${resource.dir}/unboundid-ldapsdk.pom"
          tofile="${maven.dir}/unboundid-ldapsdk-${MMPQ}.pom"
          overwrite="true">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>


    <!-- Sign the Maven artifacts.  This will only actually be done for
         release builds (if the env.GPG_PASSPHRASE property is set). -->
    <antcall target="sign-maven-components" />


    <!-- Generate a jar file with all the Maven artifacts. -->
    <jar jarfile="${package.dir}/unboundid-ldapsdk-${MMPQ}-maven.jar"
         compress="true" index="false">
      <fileset dir="${maven.dir}" />
    </jar>

    <delete dir="${maven.dir}" />
  </target>



  <!-- Sign the Maven components with GPG if the key is available. -->
  <target name="sign-maven-components" if="env.GPG_PASSPHRASE">
    <exec dir="${maven.dir}" executable="gpg"
          inputString="${env.GPG_PASSPHRASE}" failOnError="true">
      <arg line="-ab --no-tty --batch --passphrase-fd 0 --output unboundid-ldapsdk-${MMPQ}.pom.asc unboundid-ldapsdk-${MMPQ}.pom" />
    </exec>

    <exec dir="${maven.dir}" executable="gpg"
          inputString="${env.GPG_PASSPHRASE}" failOnError="true">
      <arg line="-ab --no-tty --batch --passphrase-fd 0 --output unboundid-ldapsdk-${MMPQ}.jar.asc unboundid-ldapsdk-${MMPQ}.jar" />
    </exec>

    <exec dir="${maven.dir}" executable="gpg"
          inputString="${env.GPG_PASSPHRASE}" failOnError="true">
      <arg line="-ab --no-tty --batch --passphrase-fd 0 --output unboundid-ldapsdk-${MMPQ}-sources.jar.asc unboundid-ldapsdk-${MMPQ}-sources.jar" />
    </exec>

    <exec dir="${maven.dir}" executable="gpg"
          inputString="${env.GPG_PASSPHRASE}" failOnError="true">
      <arg line="-ab --no-tty --batch --passphrase-fd 0 --output unboundid-ldapsdk-${MMPQ}-javadoc.jar.asc unboundid-ldapsdk-${MMPQ}-javadoc.jar" />
    </exec>
  </target>



  <!-- Sign the LDAP SDK zip file if the key is available. -->
  <target name="sign-ldap-sdk-zip-file" if="env.GPG_PASSPHRASE">
    <echo message="Signing LDAP SDK zip file" />
    <exec dir="${package.dir}" executable="gpg"
          inputString="${env.GPG_PASSPHRASE}" failOnError="true">
      <arg line="-ab --no-tty --batch --passphrase-fd 0 --output ${base-name}.zip.asc ${base-name}.zip" />
    </exec>
  </target>



  <!-- Run sanity checks on the LDAP SDK. -->
  <target name="sanity-check">
    <delete dir="${sc.classes.dir}" />
    <mkdir dir="${sc.classes.dir}" />

    <javac srcdir="${sc.src.dir}" destdir="${sc.classes.dir}" source="1.7"
           target="1.7" deprecation="true" fork="true"
           memoryInitialSize="${MEM}" memoryMaximumSize="${MEM}"
           optimize="true" debug="on" debuglevel="lines,source,vars"
           includeAntRuntime="true">
      <compilerarg value="-Xlint:all" />
      <classpath>
        <fileset dir="${sdk.package.dir}">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </javac>

    <taskdef name="sanityCheckTask"
             className="com.unboundid.buildtools.sanitycheck.SanityCheck">
      <classpath>
        <pathelement location="${sc.classes.dir}" />
        <fileset dir="${sdk.package.dir}">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </taskdef>

    <sanityCheckTask baseDir="${sdk.package.dir}" dsHost="${ds.host}"
                     dsPort="${ds.port}" />
  </target>



  <!-- A dummy target that doesn't do anything. -->
  <target name="no-op" />



  <!-- Get the Subversion revision number for the current source. -->
  <target name="repository-info" unless="repository-info.revision">
    <mkdir dir="${repository-info.classes.dir}" />
    <javac srcdir="${repository-info.src.dir}"
           destdir="${repository-info.classes.dir}" source="1.7" target="1.7"
           deprecation="true" fork="true" memoryInitialSize="${MEM}"
           memoryMaximumSize="${MEM}" optimize="true" debug="on"
           debuglevel="lines,source,vars" includeAntRuntime="true">
      <compilerarg value="-Xlint:all" />
      <classpath>
        <fileset dir="${svnkit.dir}">
          <include name="*.jar" />
        </fileset>
        <fileset dir="${jgit.dir}">
          <include name="*.jar" />
        </fileset>
        <fileset dir="${slf4j.dir}">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </javac>

    <taskdef name="repositoryInfoTask"
             classname="com.unboundid.buildtools.repositoryinfo.RepositoryInfo">
      <classpath>
        <pathelement location="${repository-info.classes.dir}" />
        <fileset dir="${svnkit.dir}">
          <include name="*.jar" />
        </fileset>
        <fileset dir="${jgit.dir}">
          <include name="*.jar" />
        </fileset>
        <fileset dir="${slf4j.dir}">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </taskdef>
    <repositoryInfoTask baseDir="${basedir}"
         failOnError="${repository-info.fail-on-error}"
         repositoryTypePropertyName="repository-info.type"
         repositoryURLPropertyName="repository-info.url"
         repositoryPathPropertyName="repository-info.path"
         repositoryRevisionPropertyName="repository-info.revision"
         repositoryRevisionNumberPropertyName="repository-info.revision-number" />
  </target>



  <!-- Generate documentation suitable for publishing on the website. -->
  <target name="generate-website-docs" depends="define-copydocs">
    <mkdir dir="${package.dir}/www" />
    <mkdir dir="${package.dir}/www/javadoc" />

    <copydocs sourceDir="${docs.dir}" destinationDir="${package.dir}/www"
              headerFile="${resource.dir}/localdoc.header"
              footerFile="${resource.dir}/localdoc.footer" extension="html"
              target="website" ldapSdkHomeUrl="${LDAP_SDK_HOME_URL}"
              ldapSdkDocsBaseUrl="${LDAP_SDK_DOCS_BASE_URL}" />

    <copy todir="${package.dir}/www/examples">
      <fileset dir="${src.dir}/com/unboundid/ldap/sdk/examples">
        <include name="*.java" />
        <exclude name="**/package-info.java" />
      </fileset>
      <fileset dir="${src.dir}/com/unboundid/ldap/sdk/unboundidds/examples">
        <include name="*.java" />
        <exclude name="**/package-info.java" />
      </fileset>
    </copy>

    <copy todir="${package.dir}/www">
      <fileset dir="${dist-root.dir}">
        <include name="LICENSE*.txt" />
      </fileset>
    </copy>

    <javadoc destdir="${package.dir}/www/javadoc" source="1.7"
             useexternalfile="true"
             additionalparam="-quiet" linksource="yes"
             windowtitle="UnboundID LDAP SDK for Java ${MMPQ}"
             doctitle="UnboundID LDAP SDK for Java&lt;br&gt;${MMPQ}"
             maxmemory="${MEM}" access="protected"
             bottom="&lt;div id=&quot;footer&quot;&gt;Copyright &amp;copy; 2008-${year} &amp;ndash; Ping Identity Corporation &amp;ndash; All Rights Reserved.&lt;/div&gt;">
      <fileset dir="${src.dir}" defaultexcludes="yes">
        <exclude name="**/*Helper*" />
        <exclude name="**/*InteractiveTransaction*" />
        <exclude name="**/*Constants*" />
        <exclude name="com/unboundid/util/parallel/**" />
      </fileset>
      <classpath>
        <pathelement location="${classes.dir}" />
      </classpath>
    </javadoc>

    <delete file="${package.dir}/www/javadoc/resources/inherit.gif" />
    <copy file="${resource.dir}/inherit.gif"
          toFile="${package.dir}/www/javadoc/resources/inherit.gif" />

    <property name="toolusage.online.dir"
              location="${package.dir}/www/tool-usages" />
    <mkdir dir="${toolusage.online.dir}" />
    <toolusage outputDirectory="${toolusage.online.dir}" />

    <zip destfile="${package.dir}/unboundid-ldapsdk-${MMPQ}-www.zip" compress="true">
      <zipfileset dir="${package.dir}/www" filemode="644" dirmode="755" />
    </zip>
  </target>



  <!-- Run the TestNG unit tests. -->
  <target name="test" description="Run the TestNG unit tests"
          depends="compile,coverage-setup">
    <!-- Enable code coverage if appropriate -->
    <condition property="coverage.enabled" value="false">
      <not>
        <isset property="coverage.enabled" />
      </not>
    </condition>

    <!-- Set default values for the properties used to set information
         about the Directory Server instance to use for testing. -->
    <condition property="ds.host" value="127.0.0.1">
      <not>
        <isset property="ds.host" />
      </not>
    </condition>
    <condition property="ds.port" value="-1">
      <not>
        <isset property="ds.port" />
      </not>
    </condition>
    <condition property="ds.ssl.port" value="-1">
      <not>
        <isset property="ds.ssl.port" />
      </not>
    </condition>
    <condition property="ds2.host" value="127.0.0.1">
      <not>
        <isset property="ds2.host" />
      </not>
    </condition>
    <condition property="ds2.port" value="-1">
      <not>
        <isset property="ds2.port" />
      </not>
    </condition>
    <condition property="ds2.ssl.port" value="-1">
      <not>
        <isset property="ds2.ssl.port" />
      </not>
    </condition>
    <condition property="dsee.host" value="127.0.0.1">
      <not>
        <isset property="dsee.host" />
      </not>
    </condition>
    <condition property="dsee.port" value="-1">
      <not>
        <isset property="dsee.port" />
      </not>
    </condition>
    <condition property="dsee.ssl.port" value="-1">
      <not>
        <isset property="dsee.ssl.port" />
      </not>
    </condition>
    <condition property="ds.basedn" value="dc=example,dc=com">
      <not>
        <isset property="ds.basedn" />
      </not>
    </condition>
    <condition property="ds.binddn" value="cn=Directory Manager">
      <not>
        <isset property="ds.binddn" />
      </not>
    </condition>
    <condition property="ds.bindpw" value="password">
      <not>
        <isset property="ds.bindpw" />
      </not>
    </condition>

    <!-- Compile the unit tests -->
    <mkdir dir="${unit.classes.dir}" />
    <javac srcdir="${unit.src.dir}" destdir="${unit.classes.dir}"
           source="1.7" target="1.7" deprecation="true" fork="true"
           memoryInitialSize="${MEM}" memoryMaximumSize="${MEM}"
           optimize="true" debug="on" debuglevel="lines,source,vars"
           includeAntRuntime="false">
      <compilerarg value="-Xlint:all" />
      <classpath>
        <fileset dir="${testng.dir}">
          <include name="*.jar" />
        </fileset>
        <path refid="instrument.classes" />
      </classpath>
    </javac>

    <!-- Generate the TestNG fileset descriptor. -->
    <mkdir dir="${testng.fileset.dir}" />
    <mkdir dir="${testng.fileset.classes.dir}" />
    <javac srcdir="${testng.fileset.src.dir}"
           destdir="${testng.fileset.classes.dir}"
           source="1.7" target="1.7" deprecation="true" fork="true"
           memoryInitialSize="${MEM}" memoryMaximumSize="${MEM}"
           optimize="true" debug="on" debuglevel="lines,source,vars"
           includeAntRuntime="true">
      <compilerarg value="-Xlint:all" />
      <classpath>
        <fileset dir="${testng.dir}">
          <include name="*.jar" />
        </fileset>
        <path refid="instrument.classes" />
      </classpath>
    </javac>
    <taskdef name="generateTestNGFilesetDescriptor"
             className="com.unboundid.buildtools.testngfileset.GenerateTestNGFilesetDescriptor">
      <classpath>
        <pathelement location="${testng.fileset.classes.dir}" />
      </classpath>
    </taskdef>
    <generateTestNGFilesetDescriptor file="${testng.fileset.descriptor}" />

    <!-- Run the unit tests -->
    <mkdir dir="${unit.temp.dir}" />
    <mkdir dir="${unit.report.dir}" />
    <taskdef resource="testngtasks">
      <classpath>
        <fileset dir="${testng.dir}">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </taskdef>

    <taskdef uri="antlib:org.jacoco.ant"
             resource="org/jacoco/ant/antlib.xml">
      <classpath path="${jacoco.dir}/jacocoant.jar" />
    </taskdef>

    <delete file="${coverage.out.file}" failonerror="false" />

    <jacoco:coverage enabled="${coverage.enabled}"
                     xmlns:jacoco="antlib:org.jacoco.ant"
                     destfile="${coverage.out.file}"
                     append="false">
      <testng outputdir="${unit.report.dir}" haltOnFailure="true"
              listeners="com.unboundid.test.LDAPSDKTestListener"
              enableAssert="true">
        <classpath>
          <pathelement location="${coverage.instrumented.dir}" />
          <pathelement location="${classes.dir}" />
          <pathelement location="${unit.classes.dir}" />
          <path refid="instrument.classes" />
          <fileset dir="${testng.dir}">
            <include name="*.jar" />
          </fileset>
          <fileset dir="${jacoco.dir}">
            <include name="*.jar" />
          </fileset>
        </classpath>
        <xmlfileset dir="${testng.fileset.dir}" includes="ldapsdk-fileset.xml" />
        <jvmarg value="-server" />
        <jvmarg value="-noverify" />
        <jvmarg value="-Xms${MEM}" />
        <jvmarg value="-Xmx${MEM}" />
        <jvmarg value="-XX:+UseBiasedLocking" />
        <jvmarg value="-XX:+UseMembar" />
        <jvmarg value="-Dcom.unboundid.ldap.sdk.RunningUnitTests=true" />
        <jvmarg value="-Dbasedir=${basedir}" />
        <jvmarg value="-Dunit.resource.dir=${unit.resource.dir}" />
        <jvmarg value="-Djava.io.tmpdir=${unit.temp.dir}" />
        <jvmarg value="-Dds.host=${ds.host}" />
        <jvmarg value="-Dds.port=${ds.port}" />
        <jvmarg value="-Dds.ssl.port=${ds.ssl.port}" />
        <jvmarg value="-Dds2.host=${ds2.host}" />
        <jvmarg value="-Dds2.port=${ds2.port}" />
        <jvmarg value="-Dds2.ssl.port=${ds2.ssl.port}" />
        <jvmarg value="-Ddsee.host=${dsee.host}" />
        <jvmarg value="-Ddsee.port=${dsee.port}" />
        <jvmarg value="-Ddsee.ssl.port=${dsee.ssl.port}" />
        <jvmarg value="-Dds.basedn=${ds.basedn}" />
        <jvmarg value="-Dds.binddn=${ds.binddn}" />
        <jvmarg value="-Dds.bindpw=${ds.bindpw}" />
      </testng>
    </jacoco:coverage>

    <!-- Generate the code coverage report -->
    <jacoco:merge destfile="${coverage.merged.file}"
                  xmlns:jacoco="antlib:org.jacoco.ant">
      <fileset dir="${coverage.dir}" includes="**/*.exec" />
    </jacoco:merge>

    <jacoco:report xmlns:jacoco="antlib:org.jacoco.ant">
      <executiondata>
        <file file="${coverage.merged.file}" />
      </executiondata>

      <structure name="LDAP SDK">
        <classfiles>
          <fileset dir="${classes.dir}" />
        </classfiles>
        <sourcefiles encoding="UTF-8">
          <fileset dir="${src.dir}" />
          <fileset dir="${messages.gensrc.dir}" />
        </sourcefiles>
      </structure>

      <html destdir="${coverage.report.dir}" />
      <csv  destfile="${coverage.report.dir}/report.csv" />
      <xml  destfile="${coverage.report.dir}/report.xml" />
    </jacoco:report>
  </target>



  <!-- Enable code coverage metrics for the unit tests. -->
  <target name="coverage" description="Enable code coverage metrics"
          depends="coverage-setup,test" />




  <!-- Do the necessary setup for collecting coverage metrics. -->
  <target name="coverage-setup">
    <property name="coverage.enabled" value="true" />

    <mkdir dir="${coverage.dir}" />
    <mkdir dir="${coverage.report.dir}" />

    <path id="instrument.classes">
      <pathelement location="${classes.dir}" />
    </path>
  </target>



  <!-- Sonar -->
  <target name="sonar">
    <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
      <classpath path="ext/sonar/sonar-ant-task-2.2.jar" />
    </taskdef>

    <property file="version.properties"/>

    <!-- The following properties should already be set in the JVM when
     !   performing a sonar build:
     !   sonar.jdbc.url - required
     !   sonar.jdbc.username - recommended
     !   sonar.jdbc.password - recommended
     ! -->
    <property name="sonar.projectKey" value="com.unboundid.product.ldap.sdk:directory" />
    <property name="sonar.projectVersion" value="${MMPQ}" />
    <property name="sonar.projectName" value="${PRODUCT_NAME}" />
    <property name="sonar.sources" value="${src.dir},${build-src.dir},${gen-src.dir}" />
    <property name="sonar.binaries" value="build/classes" />
    <property name="sonar.tests" value="${unit.src.dir}" />

    <sonar:sonar xmlns:sonar="antlib:org.sonar.ant" />
  </target>



  <!-- Run all defined targets -->
  <target name="all" description="Run all build targets"
          depends="package,coverage" />

</project>
